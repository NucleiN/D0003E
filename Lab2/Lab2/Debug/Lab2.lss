
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000006c8  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  00000774  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001204  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6d  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000981  00000000  00000000  0000260d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00002f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000072dd  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c0  00000000  00000000  0000a4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000ad91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002947  00000000  00000000  0000ae49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	00 00       	nop
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	00 00       	nop
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c2       	rjmp	.+1242   	; 0x4e8 <__vector_3>
   e:	00 00       	nop
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	00 00       	nop
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	00 00       	nop
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	89 c2       	rjmp	.+1298   	; 0x530 <__vector_7>
  1e:	00 00       	nop
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	00 00       	nop
  24:	36 c0       	rjmp	.+108    	; 0x92 <__bad_interrupt>
  26:	00 00       	nop
  28:	34 c0       	rjmp	.+104    	; 0x92 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	00 00       	nop
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	00 00       	nop
  34:	2e c0       	rjmp	.+92     	; 0x92 <__bad_interrupt>
  36:	00 00       	nop
  38:	2c c0       	rjmp	.+88     	; 0x92 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2a c0       	rjmp	.+84     	; 0x92 <__bad_interrupt>
  3e:	00 00       	nop
  40:	28 c0       	rjmp	.+80     	; 0x92 <__bad_interrupt>
  42:	00 00       	nop
  44:	26 c0       	rjmp	.+76     	; 0x92 <__bad_interrupt>
  46:	00 00       	nop
  48:	24 c0       	rjmp	.+72     	; 0x92 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	22 c0       	rjmp	.+68     	; 0x92 <__bad_interrupt>
  4e:	00 00       	nop
  50:	20 c0       	rjmp	.+64     	; 0x92 <__bad_interrupt>
  52:	00 00       	nop
  54:	1e c0       	rjmp	.+60     	; 0x92 <__bad_interrupt>
  56:	00 00       	nop
  58:	1c c0       	rjmp	.+56     	; 0x92 <__bad_interrupt>
	...

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 ec       	ldi	r30, 0xC8	; 200
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	ea d0       	rcall	.+468    	; 0x264 <main>
  90:	19 c3       	rjmp	.+1586   	; 0x6c4 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <CLK_init>:
#include <avr/io.h>
#include "tinythreads.h"

void CLK_init(void){
	//EN Write to PSC reg
	CLKPR = 0x80;
  94:	e1 e6       	ldi	r30, 0x61	; 97
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	80 83       	st	Z, r24
	//PSC 0
	CLKPR = 0x00;
  9c:	10 82       	st	Z, r1
  9e:	08 95       	ret

000000a0 <LCD_init>:
}

void LCD_init(void){
	//		Enable LCD | LPow Waveform
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
  a0:	80 ec       	ldi	r24, 0xC0	; 192
  a2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//		Async clksrc | 1/4 Duty | 25 segments
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  a6:	87 eb       	ldi	r24, 0xB7	; 183
  a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	//		divide by 8
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	//		CC Max 3.35V
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  b8:	08 95       	ret

000000ba <writeChar>:
}

uint16_t charNrStencils[10] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x1B51};
void writeChar(char c, int pos){
  ba:	ab 01       	movw	r20, r22
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;
  bc:	80 53       	subi	r24, 0x30	; 48

	uint8_t shift = pos%2 ? 0x04 : 0x00;
  be:	60 ff       	sbrs	r22, 0
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <writeChar+0xe>
  c2:	74 e0       	ldi	r23, 0x04	; 4
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
  c4:	af e0       	ldi	r26, 0x0F	; 15
  c6:	02 c0       	rjmp	.+4      	; 0xcc <writeChar+0x12>
void writeChar(char c, int pos){
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;

	uint8_t shift = pos%2 ? 0x04 : 0x00;
  c8:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
  ca:	a0 ef       	ldi	r26, 0xF0	; 240
	uint16_t stencil = charNrStencils[ch];
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	20 81       	ld	r18, Z
  da:	31 81       	ldd	r19, Z+1	; 0x01

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
  dc:	fa 01       	movw	r30, r20
  de:	ff 23       	and	r31, r31
  e0:	0c f4       	brge	.+2      	; 0xe4 <writeChar+0x2a>
  e2:	31 96       	adiw	r30, 0x01	; 1
  e4:	f5 95       	asr	r31
  e6:	e7 95       	ror	r30
  e8:	e4 51       	subi	r30, 0x14	; 20
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	af 01       	movw	r20, r30
  ee:	4c 5e       	subi	r20, 0xEC	; 236
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
  f2:	c9 01       	movw	r24, r18
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
  f8:	07 2e       	mov	r0, r23
  fa:	02 c0       	rjmp	.+4      	; 0x100 <writeChar+0x46>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <writeChar+0x42>
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
 104:	90 81       	ld	r25, Z
 106:	9a 23       	and	r25, r26
		*memPtr|= (stencil & 0x0F) << shift;
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
		stencil>>= 0x04;
 10c:	32 95       	swap	r19
 10e:	22 95       	swap	r18
 110:	2f 70       	andi	r18, 0x0F	; 15
 112:	23 27       	eor	r18, r19
 114:	3f 70       	andi	r19, 0x0F	; 15
 116:	23 27       	eor	r18, r19
		memPtr+= 0x05;
 118:	35 96       	adiw	r30, 0x05	; 5
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
 11a:	e4 17       	cp	r30, r20
 11c:	f5 07       	cpc	r31, r21
 11e:	49 f7       	brne	.-46     	; 0xf2 <writeChar+0x38>
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
		stencil>>= 0x04;
		memPtr+= 0x05;
	}
}
 120:	08 95       	ret

00000122 <is_prime>:

int is_prime(long nr){
 122:	8f 92       	push	r8
 124:	9f 92       	push	r9
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	4b 01       	movw	r8, r22
 134:	5c 01       	movw	r10, r24
	for(unsigned long i = 2; i*i < nr; i++)
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	88 16       	cp	r8, r24
 13a:	91 04       	cpc	r9, r1
 13c:	a1 04       	cpc	r10, r1
 13e:	b1 04       	cpc	r11, r1
 140:	18 f1       	brcs	.+70     	; 0x188 <is_prime+0x66>
		if(!(nr%i))
 142:	80 fe       	sbrs	r8, 0
 144:	24 c0       	rjmp	.+72     	; 0x18e <is_prime+0x6c>
 146:	c1 2c       	mov	r12, r1
 148:	d1 2c       	mov	r13, r1
 14a:	76 01       	movw	r14, r12
 14c:	68 94       	set
 14e:	c1 f8       	bld	r12, 1
 150:	09 c0       	rjmp	.+18     	; 0x164 <is_prime+0x42>
 152:	c5 01       	movw	r24, r10
 154:	b4 01       	movw	r22, r8
 156:	a7 01       	movw	r20, r14
 158:	96 01       	movw	r18, r12
 15a:	1c d2       	rcall	.+1080   	; 0x594 <__udivmodsi4>
 15c:	67 2b       	or	r22, r23
 15e:	68 2b       	or	r22, r24
 160:	69 2b       	or	r22, r25
 162:	c1 f0       	breq	.+48     	; 0x194 <is_prime+0x72>
		memPtr+= 0x05;
	}
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	c8 1a       	sub	r12, r24
 168:	d8 0a       	sbc	r13, r24
 16a:	e8 0a       	sbc	r14, r24
 16c:	f8 0a       	sbc	r15, r24
 16e:	a7 01       	movw	r20, r14
 170:	96 01       	movw	r18, r12
 172:	c7 01       	movw	r24, r14
 174:	b6 01       	movw	r22, r12
 176:	ff d1       	rcall	.+1022   	; 0x576 <__mulsi3>
 178:	68 15       	cp	r22, r8
 17a:	79 05       	cpc	r23, r9
 17c:	8a 05       	cpc	r24, r10
 17e:	9b 05       	cpc	r25, r11
 180:	40 f3       	brcs	.-48     	; 0x152 <is_prime+0x30>
		if(!(nr%i))
			return 0;
	return 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 c0       	rjmp	.+16     	; 0x198 <is_prime+0x76>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	05 c0       	rjmp	.+10     	; 0x198 <is_prime+0x76>
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
		if(!(nr%i))
			return 0;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <is_prime+0x76>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	9f 90       	pop	r9
 1a6:	8f 90       	pop	r8
 1a8:	08 95       	ret

000001aa <printAt>:

mutex mpp;
int pp;
void printAt(long num, int pos) {
 1aa:	8f 92       	push	r8
 1ac:	9f 92       	push	r9
 1ae:	af 92       	push	r10
 1b0:	bf 92       	push	r11
 1b2:	cf 92       	push	r12
 1b4:	df 92       	push	r13
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	4b 01       	movw	r8, r22
 1c0:	5c 01       	movw	r10, r24
 1c2:	ea 01       	movw	r28, r20
	lock(&mpp);
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	a5 d0       	rcall	.+330    	; 0x314 <lock>
    pp = pos;
 1ca:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <pp+0x1>
 1ce:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 1d2:	c5 01       	movw	r24, r10
 1d4:	b4 01       	movw	r22, r8
 1d6:	24 e6       	ldi	r18, 0x64	; 100
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	fc d1       	rcall	.+1016   	; 0x5d8 <__divmodsi4>
 1e0:	0f 2e       	mov	r0, r31
 1e2:	fa e0       	ldi	r31, 0x0A	; 10
 1e4:	cf 2e       	mov	r12, r31
 1e6:	d1 2c       	mov	r13, r1
 1e8:	e1 2c       	mov	r14, r1
 1ea:	f1 2c       	mov	r15, r1
 1ec:	f0 2d       	mov	r31, r0
 1ee:	a7 01       	movw	r20, r14
 1f0:	96 01       	movw	r18, r12
 1f2:	f2 d1       	rcall	.+996    	; 0x5d8 <__divmodsi4>
 1f4:	be 01       	movw	r22, r28
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	82 0f       	add	r24, r18
 1fa:	5f df       	rcall	.-322    	; 0xba <writeChar>
    pp++;
 1fc:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <pp>
 200:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <pp+0x1>
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <pp+0x1>
 20a:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <pp>
    writeChar( num % 10 + '0', pp);
 20e:	c5 01       	movw	r24, r10
 210:	b4 01       	movw	r22, r8
 212:	a7 01       	movw	r20, r14
 214:	96 01       	movw	r18, r12
 216:	e0 d1       	rcall	.+960    	; 0x5d8 <__divmodsi4>
 218:	86 2f       	mov	r24, r22
 21a:	be 01       	movw	r22, r28
 21c:	80 5d       	subi	r24, 0xD0	; 208
 21e:	4d df       	rcall	.-358    	; 0xba <writeChar>
	unlock(&mpp);
 220:	8e e1       	ldi	r24, 0x1E	; 30
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	9c d0       	rcall	.+312    	; 0x35e <unlock>
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	bf 90       	pop	r11
 234:	af 90       	pop	r10
 236:	9f 90       	pop	r9
 238:	8f 90       	pop	r8
 23a:	08 95       	ret

0000023c <computePrimes>:

void computePrimes(int pos) {
 23c:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 23e:	c1 2c       	mov	r12, r1
 240:	d1 2c       	mov	r13, r1
 242:	76 01       	movw	r14, r12
 244:	c3 94       	inc	r12
        if (is_prime(n)) {
 246:	c7 01       	movw	r24, r14
 248:	b6 01       	movw	r22, r12
 24a:	6b df       	rcall	.-298    	; 0x122 <is_prime>
 24c:	89 2b       	or	r24, r25
 24e:	21 f0       	breq	.+8      	; 0x258 <computePrimes+0x1c>
            printAt(n, pos);
 250:	ae 01       	movw	r20, r28
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	a9 df       	rcall	.-174    	; 0x1aa <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	c8 1a       	sub	r12, r24
 25c:	d8 0a       	sbc	r13, r24
 25e:	e8 0a       	sbc	r14, r24
 260:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
            //yield();
        }
    }
 262:	f1 cf       	rjmp	.-30     	; 0x246 <computePrimes+0xa>

00000264 <main>:
}

int main() {
	CLK_init();
 264:	17 df       	rcall	.-466    	; 0x94 <CLK_init>
	LCD_init();
 266:	1c df       	rcall	.-456    	; 0xa0 <LCD_init>
	
    spawn(computePrimes, 0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	8e e1       	ldi	r24, 0x1E	; 30
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	b0 d0       	rcall	.+352    	; 0x3d2 <spawn>
    computePrimes(3);
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	e2 df       	rcall	.-60     	; 0x23c <computePrimes>

00000278 <enqueue>:
	
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 278:	dc 01       	movw	r26, r24
 27a:	15 96       	adiw	r26, 0x05	; 5
 27c:	1c 92       	st	X, r1
 27e:	1e 92       	st	-X, r1
 280:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 282:	db 01       	movw	r26, r22
 284:	ed 91       	ld	r30, X+
 286:	fc 91       	ld	r31, X
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	30 97       	sbiw	r30, 0x00	; 0
 28c:	21 f4       	brne	.+8      	; 0x296 <enqueue+0x1e>
        *queue = p;
 28e:	8d 93       	st	X+, r24
 290:	9c 93       	st	X, r25
 292:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 294:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 296:	24 81       	ldd	r18, Z+4	; 0x04
 298:	35 81       	ldd	r19, Z+5	; 0x05
 29a:	21 15       	cp	r18, r1
 29c:	31 05       	cpc	r19, r1
 29e:	d1 f7       	brne	.-12     	; 0x294 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 2a0:	95 83       	std	Z+5, r25	; 0x05
 2a2:	84 83       	std	Z+4, r24	; 0x04
 2a4:	08 95       	ret

000002a6 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <dispatch+0x6>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 2b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 2b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 2bc:	06 96       	adiw	r24, 0x06	; 6
 2be:	c1 d1       	rcall	.+898    	; 0x642 <setjmp>
 2c0:	89 2b       	or	r24, r25
 2c2:	51 f4       	brne	.+20     	; 0x2d8 <dispatch+0x32>
        current = next;
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	9a 81       	ldd	r25, Y+2	; 0x02
 2c8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 2cc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
        longjmp(next->context,1);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	06 96       	adiw	r24, 0x06	; 6
 2d6:	d5 d1       	rcall	.+938    	; 0x682 <longjmp>
    }
}
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <yield>:
    enqueue(newp, &readyQ);
    ENABLE();
}

void yield(void) {
	DISABLE();
 2e2:	f8 94       	cli
	enqueue(current, &readyQ);
 2e4:	6a e1       	ldi	r22, 0x1A	; 26
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 2ec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 2f0:	c3 df       	rcall	.-122    	; 0x278 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 2f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 2f6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
    if (*queue) {
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	51 f0       	breq	.+20     	; 0x312 <yield+0x30>
        *queue = (*queue)->next;
 2fe:	fc 01       	movw	r30, r24
 300:	24 81       	ldd	r18, Z+4	; 0x04
 302:	35 81       	ldd	r19, Z+5	; 0x05
 304:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 308:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 30c:	cc df       	rcall	.-104    	; 0x2a6 <dispatch>
	ENABLE();
 30e:	78 94       	sei
 310:	08 95       	ret
 312:	ff cf       	rjmp	.-2      	; 0x312 <yield+0x30>

00000314 <lock>:
}

void lock(mutex *m) {
	DISABLE();
 314:	f8 94       	cli
	if(m->locked == 0){
 316:	fc 01       	movw	r30, r24
 318:	20 81       	ld	r18, Z
 31a:	31 81       	ldd	r19, Z+1	; 0x01
 31c:	23 2b       	or	r18, r19
 31e:	29 f4       	brne	.+10     	; 0x32a <lock+0x16>
		m->locked = 1;
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	31 83       	std	Z+1, r19	; 0x01
 326:	20 83       	st	Z, r18
 328:	18 c0       	rjmp	.+48     	; 0x35a <lock+0x46>
	}else{
		enqueue(current, &(m->waitQ));
 32a:	bc 01       	movw	r22, r24
 32c:	6e 5f       	subi	r22, 0xFE	; 254
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 334:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 338:	9f df       	rcall	.-194    	; 0x278 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 33a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 33e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
    if (*queue) {
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	49 f0       	breq	.+18     	; 0x358 <lock+0x44>
        *queue = (*queue)->next;
 346:	fc 01       	movw	r30, r24
 348:	24 81       	ldd	r18, Z+4	; 0x04
 34a:	35 81       	ldd	r19, Z+5	; 0x05
 34c:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 350:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
	DISABLE();
	if(m->locked == 0){
		m->locked = 1;
	}else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 354:	a8 df       	rcall	.-176    	; 0x2a6 <dispatch>
 356:	01 c0       	rjmp	.+2      	; 0x35a <lock+0x46>
 358:	ff cf       	rjmp	.-2      	; 0x358 <lock+0x44>
	}
	ENABLE();
 35a:	78 94       	sei
 35c:	08 95       	ret

0000035e <unlock>:
}

void unlock(mutex *m) {
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
	DISABLE();
 362:	f8 94       	cli
	if(m->waitQ == NULL){
 364:	fc 01       	movw	r30, r24
 366:	22 81       	ldd	r18, Z+2	; 0x02
 368:	33 81       	ldd	r19, Z+3	; 0x03
 36a:	23 2b       	or	r18, r19
 36c:	19 f4       	brne	.+6      	; 0x374 <unlock+0x16>
		m->locked = 0;
 36e:	11 82       	std	Z+1, r1	; 0x01
 370:	10 82       	st	Z, r1
 372:	14 c0       	rjmp	.+40     	; 0x39c <unlock+0x3e>
 374:	ec 01       	movw	r28, r24
	}else{
		enqueue(current, &readyQ);
 376:	6a e1       	ldi	r22, 0x1A	; 26
 378:	71 e0       	ldi	r23, 0x01	; 1
 37a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 37e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 382:	7a df       	rcall	.-268    	; 0x278 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	39 f0       	breq	.+14     	; 0x39a <unlock+0x3c>
        *queue = (*queue)->next;
 38c:	fc 01       	movw	r30, r24
 38e:	24 81       	ldd	r18, Z+4	; 0x04
 390:	35 81       	ldd	r19, Z+5	; 0x05
 392:	3b 83       	std	Y+3, r19	; 0x03
 394:	2a 83       	std	Y+2, r18	; 0x02
	DISABLE();
	if(m->waitQ == NULL){
		m->locked = 0;
	}else{
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 396:	87 df       	rcall	.-242    	; 0x2a6 <dispatch>
 398:	01 c0       	rjmp	.+2      	; 0x39c <unlock+0x3e>
 39a:	ff cf       	rjmp	.-2      	; 0x39a <unlock+0x3c>
	}
	ENABLE();
 39c:	78 94       	sei
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <TIM_init>:

void TIM_init(void){
	//		CTC				PSC 1024
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
 3a4:	8d e0       	ldi	r24, 0x0D	; 13
 3a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//		8MHz/1024/20
	OCR1A = 391;
 3aa:	87 e8       	ldi	r24, 0x87	; 135
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//		Interrupt En
	TIMSK1 = (1<<OCIE1A);
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0;
 3bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3c4:	08 95       	ret

000003c6 <BTN_init>:
}

void BTN_init(void){
	//		IT EN pins
	EIMSK = (1<<PCIE1);
 3c6:	80 e8       	ldi	r24, 0x80	; 128
 3c8:	8d bb       	out	0x1d, r24	; 29
	//		IT EN pin 15
	PCMSK1 = (1<<PCINT15);
 3ca:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	//		Pullup
	PORTB = (1<<PINB7);
 3ce:	85 b9       	out	0x05, r24	; 5
 3d0:	08 95       	ret

000003d2 <spawn>:
        current = next;
        longjmp(next->context,1);
    }
}

void spawn(void (* function)(int), int arg) {
 3d2:	ef 92       	push	r14
 3d4:	ff 92       	push	r15
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <spawn+0xe>
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	7c 01       	movw	r14, r24
 3e6:	8b 01       	movw	r16, r22
    thread newp;

    DISABLE();
 3e8:	f8 94       	cli
    if (!initialized) initialize();
 3ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 3ee:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 3f2:	89 2b       	or	r24, r25
 3f4:	f1 f4       	brne	.+60     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 3f6:	8c ef       	ldi	r24, 0xFC	; 252
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <threads+0x5>
 3fe:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <threads+0x4>
 402:	89 e6       	ldi	r24, 0x69	; 105
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <threads+0x72>
 40a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <threads+0x71>
 40e:	86 ed       	ldi	r24, 0xD6	; 214
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <threads+0xdf>
 416:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 41a:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 41e:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

	BTN_init();
 422:	d1 df       	rcall	.-94     	; 0x3c6 <BTN_init>
	TIM_init();
 424:	bf df       	rcall	.-130    	; 0x3a4 <TIM_init>
	
    initialized = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 42e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 432:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <freeQ>
 436:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <freeQ+0x1>
 43a:	9a 83       	std	Y+2, r25	; 0x02
 43c:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 43e:	00 97       	sbiw	r24, 0x00	; 0
 440:	99 f0       	breq	.+38     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
        *queue = (*queue)->next;
 442:	fc 01       	movw	r30, r24
 444:	84 81       	ldd	r24, Z+4	; 0x04
 446:	95 81       	ldd	r25, Z+5	; 0x05
 448:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <freeQ+0x1>
 44c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 450:	f1 82       	std	Z+1, r15	; 0x01
 452:	e0 82       	st	Z, r14
    newp->arg = arg;
 454:	13 83       	std	Z+3, r17	; 0x03
 456:	02 83       	std	Z+2, r16	; 0x02
    newp->next = NULL;
 458:	15 82       	std	Z+5, r1	; 0x05
 45a:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 45c:	cf 01       	movw	r24, r30
 45e:	06 96       	adiw	r24, 0x06	; 6
 460:	f0 d0       	rcall	.+480    	; 0x642 <setjmp>
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	39 f5       	brne	.+78     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 466:	01 c0       	rjmp	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	ff cf       	rjmp	.-2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
        ENABLE();
 46a:	78 94       	sei
        current->function(current->arg);
 46c:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 470:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 474:	ed 91       	ld	r30, X+
 476:	fc 91       	ld	r31, X
 478:	11 97       	sbiw	r26, 0x01	; 1
 47a:	12 96       	adiw	r26, 0x02	; 2
 47c:	8d 91       	ld	r24, X+
 47e:	9c 91       	ld	r25, X
 480:	13 97       	sbiw	r26, 0x03	; 3
 482:	09 95       	icall
        DISABLE();
 484:	f8 94       	cli
        enqueue(current, &freeQ);
 486:	66 e1       	ldi	r22, 0x16	; 22
 488:	71 e0       	ldi	r23, 0x01	; 1
 48a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 48e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 492:	f2 de       	rcall	.-540    	; 0x278 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 494:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 498:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
    if (*queue) {
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	49 f0       	breq	.+18     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
        *queue = (*queue)->next;
 4a0:	fc 01       	movw	r30, r24
 4a2:	24 81       	ldd	r18, Z+4	; 0x04
 4a4:	35 81       	ldd	r19, Z+5	; 0x05
 4a6:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 4aa:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4ae:	fb de       	rcall	.-522    	; 0x2a6 <dispatch>
 4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
    }
    SETSTACK(&newp->context, &newp->stack);
 4b4:	e9 81       	ldd	r30, Y+1	; 0x01
 4b6:	fa 81       	ldd	r31, Y+2	; 0x02
 4b8:	36 96       	adiw	r30, 0x06	; 6
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	9a 81       	ldd	r25, Y+2	; 0x02
 4be:	87 59       	subi	r24, 0x97	; 151
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	91 8b       	std	Z+17, r25	; 0x11
 4c4:	80 8b       	std	Z+16, r24	; 0x10
 4c6:	93 8b       	std	Z+19, r25	; 0x13
 4c8:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 4ca:	6a e1       	ldi	r22, 0x1A	; 26
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	9a 81       	ldd	r25, Y+2	; 0x02
 4d2:	d2 de       	rcall	.-604    	; 0x278 <enqueue>
    ENABLE();
 4d4:	78 94       	sei
}
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	08 95       	ret

000004e8 <__vector_3>:
	PCMSK1 = (1<<PCINT15);
	//		Pullup
	PORTB = (1<<PINB7);
}

ISR(PCINT1_vect) { // BTN IE
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	4f 93       	push	r20
 4f8:	5f 93       	push	r21
 4fa:	6f 93       	push	r22
 4fc:	7f 93       	push	r23
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	af 93       	push	r26
 504:	bf 93       	push	r27
 506:	ef 93       	push	r30
 508:	ff 93       	push	r31
	if(!(PINB & (1<<PINB7)))
 50a:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 50c:	ea de       	rcall	.-556    	; 0x2e2 <yield>
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	bf 91       	pop	r27
 514:	af 91       	pop	r26
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	7f 91       	pop	r23
 51c:	6f 91       	pop	r22
 51e:	5f 91       	pop	r21
 520:	4f 91       	pop	r20
 522:	3f 91       	pop	r19
 524:	2f 91       	pop	r18
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_7>:

ISR(TIMER1_COMPA_vect){ // TIM IE
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	ef 93       	push	r30
 550:	ff 93       	push	r31
	yield();
 552:	c7 de       	rcall	.-626    	; 0x2e2 <yield>
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__mulsi3>:
 576:	db 01       	movw	r26, r22
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	49 d0       	rcall	.+146    	; 0x610 <__muluhisi3>
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	a2 9f       	mul	r26, r18
 584:	80 0d       	add	r24, r0
 586:	91 1d       	adc	r25, r1
 588:	a3 9f       	mul	r26, r19
 58a:	90 0d       	add	r25, r0
 58c:	b2 9f       	mul	r27, r18
 58e:	90 0d       	add	r25, r0
 590:	11 24       	eor	r1, r1
 592:	08 95       	ret

00000594 <__udivmodsi4>:
 594:	a1 e2       	ldi	r26, 0x21	; 33
 596:	1a 2e       	mov	r1, r26
 598:	aa 1b       	sub	r26, r26
 59a:	bb 1b       	sub	r27, r27
 59c:	fd 01       	movw	r30, r26
 59e:	0d c0       	rjmp	.+26     	; 0x5ba <__udivmodsi4_ep>

000005a0 <__udivmodsi4_loop>:
 5a0:	aa 1f       	adc	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	ee 1f       	adc	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	a2 17       	cp	r26, r18
 5aa:	b3 07       	cpc	r27, r19
 5ac:	e4 07       	cpc	r30, r20
 5ae:	f5 07       	cpc	r31, r21
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__udivmodsi4_ep>
 5b2:	a2 1b       	sub	r26, r18
 5b4:	b3 0b       	sbc	r27, r19
 5b6:	e4 0b       	sbc	r30, r20
 5b8:	f5 0b       	sbc	r31, r21

000005ba <__udivmodsi4_ep>:
 5ba:	66 1f       	adc	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	1a 94       	dec	r1
 5c4:	69 f7       	brne	.-38     	; 0x5a0 <__udivmodsi4_loop>
 5c6:	60 95       	com	r22
 5c8:	70 95       	com	r23
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	9b 01       	movw	r18, r22
 5d0:	ac 01       	movw	r20, r24
 5d2:	bd 01       	movw	r22, r26
 5d4:	cf 01       	movw	r24, r30
 5d6:	08 95       	ret

000005d8 <__divmodsi4>:
 5d8:	05 2e       	mov	r0, r21
 5da:	97 fb       	bst	r25, 7
 5dc:	16 f4       	brtc	.+4      	; 0x5e2 <__divmodsi4+0xa>
 5de:	00 94       	com	r0
 5e0:	0f d0       	rcall	.+30     	; 0x600 <__negsi2>
 5e2:	57 fd       	sbrc	r21, 7
 5e4:	05 d0       	rcall	.+10     	; 0x5f0 <__divmodsi4_neg2>
 5e6:	d6 df       	rcall	.-84     	; 0x594 <__udivmodsi4>
 5e8:	07 fc       	sbrc	r0, 7
 5ea:	02 d0       	rcall	.+4      	; 0x5f0 <__divmodsi4_neg2>
 5ec:	46 f4       	brtc	.+16     	; 0x5fe <__divmodsi4_exit>
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__negsi2>

000005f0 <__divmodsi4_neg2>:
 5f0:	50 95       	com	r21
 5f2:	40 95       	com	r20
 5f4:	30 95       	com	r19
 5f6:	21 95       	neg	r18
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
 5fa:	4f 4f       	sbci	r20, 0xFF	; 255
 5fc:	5f 4f       	sbci	r21, 0xFF	; 255

000005fe <__divmodsi4_exit>:
 5fe:	08 95       	ret

00000600 <__negsi2>:
 600:	90 95       	com	r25
 602:	80 95       	com	r24
 604:	70 95       	com	r23
 606:	61 95       	neg	r22
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	08 95       	ret

00000610 <__muluhisi3>:
 610:	09 d0       	rcall	.+18     	; 0x624 <__umulhisi3>
 612:	a5 9f       	mul	r26, r21
 614:	90 0d       	add	r25, r0
 616:	b4 9f       	mul	r27, r20
 618:	90 0d       	add	r25, r0
 61a:	a4 9f       	mul	r26, r20
 61c:	80 0d       	add	r24, r0
 61e:	91 1d       	adc	r25, r1
 620:	11 24       	eor	r1, r1
 622:	08 95       	ret

00000624 <__umulhisi3>:
 624:	a2 9f       	mul	r26, r18
 626:	b0 01       	movw	r22, r0
 628:	b3 9f       	mul	r27, r19
 62a:	c0 01       	movw	r24, r0
 62c:	a3 9f       	mul	r26, r19
 62e:	70 0d       	add	r23, r0
 630:	81 1d       	adc	r24, r1
 632:	11 24       	eor	r1, r1
 634:	91 1d       	adc	r25, r1
 636:	b2 9f       	mul	r27, r18
 638:	70 0d       	add	r23, r0
 63a:	81 1d       	adc	r24, r1
 63c:	11 24       	eor	r1, r1
 63e:	91 1d       	adc	r25, r1
 640:	08 95       	ret

00000642 <setjmp>:
 642:	dc 01       	movw	r26, r24
 644:	2d 92       	st	X+, r2
 646:	3d 92       	st	X+, r3
 648:	4d 92       	st	X+, r4
 64a:	5d 92       	st	X+, r5
 64c:	6d 92       	st	X+, r6
 64e:	7d 92       	st	X+, r7
 650:	8d 92       	st	X+, r8
 652:	9d 92       	st	X+, r9
 654:	ad 92       	st	X+, r10
 656:	bd 92       	st	X+, r11
 658:	cd 92       	st	X+, r12
 65a:	dd 92       	st	X+, r13
 65c:	ed 92       	st	X+, r14
 65e:	fd 92       	st	X+, r15
 660:	0d 93       	st	X+, r16
 662:	1d 93       	st	X+, r17
 664:	cd 93       	st	X+, r28
 666:	dd 93       	st	X+, r29
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	8d b7       	in	r24, 0x3d	; 61
 66e:	8d 93       	st	X+, r24
 670:	8e b7       	in	r24, 0x3e	; 62
 672:	8d 93       	st	X+, r24
 674:	8f b7       	in	r24, 0x3f	; 63
 676:	8d 93       	st	X+, r24
 678:	ed 93       	st	X+, r30
 67a:	fd 93       	st	X+, r31
 67c:	88 27       	eor	r24, r24
 67e:	99 27       	eor	r25, r25
 680:	09 94       	ijmp

00000682 <longjmp>:
 682:	dc 01       	movw	r26, r24
 684:	cb 01       	movw	r24, r22
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	91 05       	cpc	r25, r1
 68a:	81 1d       	adc	r24, r1
 68c:	2d 90       	ld	r2, X+
 68e:	3d 90       	ld	r3, X+
 690:	4d 90       	ld	r4, X+
 692:	5d 90       	ld	r5, X+
 694:	6d 90       	ld	r6, X+
 696:	7d 90       	ld	r7, X+
 698:	8d 90       	ld	r8, X+
 69a:	9d 90       	ld	r9, X+
 69c:	ad 90       	ld	r10, X+
 69e:	bd 90       	ld	r11, X+
 6a0:	cd 90       	ld	r12, X+
 6a2:	dd 90       	ld	r13, X+
 6a4:	ed 90       	ld	r14, X+
 6a6:	fd 90       	ld	r15, X+
 6a8:	0d 91       	ld	r16, X+
 6aa:	1d 91       	ld	r17, X+
 6ac:	cd 91       	ld	r28, X+
 6ae:	dd 91       	ld	r29, X+
 6b0:	ed 91       	ld	r30, X+
 6b2:	fd 91       	ld	r31, X+
 6b4:	0d 90       	ld	r0, X+
 6b6:	f8 94       	cli
 6b8:	fe bf       	out	0x3e, r31	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	ed bf       	out	0x3d, r30	; 61
 6be:	ed 91       	ld	r30, X+
 6c0:	fd 91       	ld	r31, X+
 6c2:	09 94       	ijmp

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
