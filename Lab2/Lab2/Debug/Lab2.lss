
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000050c  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800118  00800118  000005b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001044  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b12  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a4  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000072c7  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f8  00000000  00000000  00009f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000a51f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002947  00000000  00000000  0000a5c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	00 00       	nop
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	00 00       	nop
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	00 00       	nop
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	00 00       	nop
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	00 00       	nop
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	00 00       	nop
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	00 00       	nop
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	00 00       	nop
  24:	36 c0       	rjmp	.+108    	; 0x92 <__bad_interrupt>
  26:	00 00       	nop
  28:	34 c0       	rjmp	.+104    	; 0x92 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	00 00       	nop
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	00 00       	nop
  34:	2e c0       	rjmp	.+92     	; 0x92 <__bad_interrupt>
  36:	00 00       	nop
  38:	2c c0       	rjmp	.+88     	; 0x92 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2a c0       	rjmp	.+84     	; 0x92 <__bad_interrupt>
  3e:	00 00       	nop
  40:	28 c0       	rjmp	.+80     	; 0x92 <__bad_interrupt>
  42:	00 00       	nop
  44:	26 c0       	rjmp	.+76     	; 0x92 <__bad_interrupt>
  46:	00 00       	nop
  48:	24 c0       	rjmp	.+72     	; 0x92 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	22 c0       	rjmp	.+68     	; 0x92 <__bad_interrupt>
  4e:	00 00       	nop
  50:	20 c0       	rjmp	.+64     	; 0x92 <__bad_interrupt>
  52:	00 00       	nop
  54:	1e c0       	rjmp	.+60     	; 0x92 <__bad_interrupt>
  56:	00 00       	nop
  58:	1c c0       	rjmp	.+56     	; 0x92 <__bad_interrupt>
	...

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e0       	ldi	r30, 0x0C	; 12
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ad 33       	cpi	r26, 0x3D	; 61
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	d6 d0       	rcall	.+428    	; 0x23c <main>
  90:	3b c2       	rjmp	.+1142   	; 0x508 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <CLK_init>:
	//PSC 0
	CLKPR = 0x00;
}

void BTN_init(void){
	PORTB = (1 << PINB7);
  94:	e1 e6       	ldi	r30, 0x61	; 97
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	80 83       	st	Z, r24
  9c:	10 82       	st	Z, r1
  9e:	08 95       	ret

000000a0 <LCD_init>:
}

void LCD_init(void){
	//		Enable LCD | LPow Waveform
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
  a0:	80 ec       	ldi	r24, 0xC0	; 192
  a2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//		Async clksrc | 1/4 Duty | 25 segments
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  a6:	87 eb       	ldi	r24, 0xB7	; 183
  a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	//		divide by 8
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	//		CC Max 3.35V
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  b8:	08 95       	ret

000000ba <writeChar>:
}

uint16_t charNrStencils[10] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x1B51};
void writeChar(char c, int pos){
  ba:	ab 01       	movw	r20, r22
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;
  bc:	80 53       	subi	r24, 0x30	; 48

	uint8_t shift = pos%2 ? 0x04 : 0x00;
  be:	60 ff       	sbrs	r22, 0
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <writeChar+0xe>
  c2:	74 e0       	ldi	r23, 0x04	; 4
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
  c4:	af e0       	ldi	r26, 0x0F	; 15
  c6:	02 c0       	rjmp	.+4      	; 0xcc <writeChar+0x12>
void writeChar(char c, int pos){
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;

	uint8_t shift = pos%2 ? 0x04 : 0x00;
  c8:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
  ca:	a0 ef       	ldi	r26, 0xF0	; 240
	uint16_t stencil = charNrStencils[ch];
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	20 81       	ld	r18, Z
  da:	31 81       	ldd	r19, Z+1	; 0x01

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
  dc:	fa 01       	movw	r30, r20
  de:	ff 23       	and	r31, r31
  e0:	0c f4       	brge	.+2      	; 0xe4 <writeChar+0x2a>
  e2:	31 96       	adiw	r30, 0x01	; 1
  e4:	f5 95       	asr	r31
  e6:	e7 95       	ror	r30
  e8:	e4 51       	subi	r30, 0x14	; 20
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	af 01       	movw	r20, r30
  ee:	4c 5e       	subi	r20, 0xEC	; 236
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
  f2:	c9 01       	movw	r24, r18
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
  f8:	07 2e       	mov	r0, r23
  fa:	02 c0       	rjmp	.+4      	; 0x100 <writeChar+0x46>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <writeChar+0x42>
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
 104:	90 81       	ld	r25, Z
 106:	9a 23       	and	r25, r26
		*memPtr|= (stencil & 0x0F) << shift;
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
		stencil>>= 0x04;
 10c:	32 95       	swap	r19
 10e:	22 95       	swap	r18
 110:	2f 70       	andi	r18, 0x0F	; 15
 112:	23 27       	eor	r18, r19
 114:	3f 70       	andi	r19, 0x0F	; 15
 116:	23 27       	eor	r18, r19
		memPtr+= 0x05;
 118:	35 96       	adiw	r30, 0x05	; 5
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
 11a:	e4 17       	cp	r30, r20
 11c:	f5 07       	cpc	r31, r21
 11e:	49 f7       	brne	.-46     	; 0xf2 <writeChar+0x38>
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
		stencil>>= 0x04;
		memPtr+= 0x05;
	}
}
 120:	08 95       	ret

00000122 <is_prime>:

int is_prime(long nr){
 122:	8f 92       	push	r8
 124:	9f 92       	push	r9
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	4b 01       	movw	r8, r22
 134:	5c 01       	movw	r10, r24
	for(unsigned long i = 2; i*i < nr; i++)
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	88 16       	cp	r8, r24
 13a:	91 04       	cpc	r9, r1
 13c:	a1 04       	cpc	r10, r1
 13e:	b1 04       	cpc	r11, r1
 140:	18 f1       	brcs	.+70     	; 0x188 <is_prime+0x66>
		if(!(nr%i))
 142:	80 fe       	sbrs	r8, 0
 144:	24 c0       	rjmp	.+72     	; 0x18e <is_prime+0x6c>
 146:	c1 2c       	mov	r12, r1
 148:	d1 2c       	mov	r13, r1
 14a:	76 01       	movw	r14, r12
 14c:	68 94       	set
 14e:	c1 f8       	bld	r12, 1
 150:	09 c0       	rjmp	.+18     	; 0x164 <is_prime+0x42>
 152:	c5 01       	movw	r24, r10
 154:	b4 01       	movw	r22, r8
 156:	a7 01       	movw	r20, r14
 158:	96 01       	movw	r18, r12
 15a:	3e d1       	rcall	.+636    	; 0x3d8 <__udivmodsi4>
 15c:	67 2b       	or	r22, r23
 15e:	68 2b       	or	r22, r24
 160:	69 2b       	or	r22, r25
 162:	c1 f0       	breq	.+48     	; 0x194 <is_prime+0x72>
		memPtr+= 0x05;
	}
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	c8 1a       	sub	r12, r24
 168:	d8 0a       	sbc	r13, r24
 16a:	e8 0a       	sbc	r14, r24
 16c:	f8 0a       	sbc	r15, r24
 16e:	a7 01       	movw	r20, r14
 170:	96 01       	movw	r18, r12
 172:	c7 01       	movw	r24, r14
 174:	b6 01       	movw	r22, r12
 176:	21 d1       	rcall	.+578    	; 0x3ba <__mulsi3>
 178:	68 15       	cp	r22, r8
 17a:	79 05       	cpc	r23, r9
 17c:	8a 05       	cpc	r24, r10
 17e:	9b 05       	cpc	r25, r11
 180:	40 f3       	brcs	.-48     	; 0x152 <is_prime+0x30>
		if(!(nr%i))
			return 0;
	return 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 c0       	rjmp	.+16     	; 0x198 <is_prime+0x76>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	05 c0       	rjmp	.+10     	; 0x198 <is_prime+0x76>
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
		if(!(nr%i))
			return 0;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <is_prime+0x76>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	9f 90       	pop	r9
 1a6:	8f 90       	pop	r8
 1a8:	08 95       	ret

000001aa <printAt>:

void printAt(long num, int pos) {
 1aa:	8f 92       	push	r8
 1ac:	9f 92       	push	r9
 1ae:	af 92       	push	r10
 1b0:	bf 92       	push	r11
 1b2:	cf 92       	push	r12
 1b4:	df 92       	push	r13
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	4b 01       	movw	r8, r22
 1c0:	5c 01       	movw	r10, r24
 1c2:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 1c4:	24 e6       	ldi	r18, 0x64	; 100
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	27 d1       	rcall	.+590    	; 0x41c <__divmodsi4>
 1ce:	0f 2e       	mov	r0, r31
 1d0:	fa e0       	ldi	r31, 0x0A	; 10
 1d2:	cf 2e       	mov	r12, r31
 1d4:	d1 2c       	mov	r13, r1
 1d6:	e1 2c       	mov	r14, r1
 1d8:	f1 2c       	mov	r15, r1
 1da:	f0 2d       	mov	r31, r0
 1dc:	a7 01       	movw	r20, r14
 1de:	96 01       	movw	r18, r12
 1e0:	1d d1       	rcall	.+570    	; 0x41c <__divmodsi4>
 1e2:	be 01       	movw	r22, r28
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	82 0f       	add	r24, r18
 1e8:	68 df       	rcall	.-304    	; 0xba <writeChar>
    pp++;
 1ea:	21 96       	adiw	r28, 0x01	; 1
    writeChar( num % 10 + '0', pp);
 1ec:	c5 01       	movw	r24, r10
 1ee:	b4 01       	movw	r22, r8
 1f0:	a7 01       	movw	r20, r14
 1f2:	96 01       	movw	r18, r12
 1f4:	13 d1       	rcall	.+550    	; 0x41c <__divmodsi4>
 1f6:	86 2f       	mov	r24, r22
 1f8:	be 01       	movw	r22, r28
 1fa:	80 5d       	subi	r24, 0xD0	; 208
 1fc:	5e df       	rcall	.-324    	; 0xba <writeChar>
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	bf 90       	pop	r11
 20c:	af 90       	pop	r10
 20e:	9f 90       	pop	r9
 210:	8f 90       	pop	r8
 212:	08 95       	ret

00000214 <computePrimes>:

void computePrimes(int pos) {
 214:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 216:	c1 2c       	mov	r12, r1
 218:	d1 2c       	mov	r13, r1
 21a:	76 01       	movw	r14, r12
 21c:	c3 94       	inc	r12
        if (is_prime(n)) {
 21e:	c7 01       	movw	r24, r14
 220:	b6 01       	movw	r22, r12
 222:	7f df       	rcall	.-258    	; 0x122 <is_prime>
 224:	89 2b       	or	r24, r25
 226:	21 f0       	breq	.+8      	; 0x230 <computePrimes+0x1c>
            printAt(n, pos);
 228:	ae 01       	movw	r20, r28
 22a:	c7 01       	movw	r24, r14
 22c:	b6 01       	movw	r22, r12
 22e:	bd df       	rcall	.-134    	; 0x1aa <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	c8 1a       	sub	r12, r24
 234:	d8 0a       	sbc	r13, r24
 236:	e8 0a       	sbc	r14, r24
 238:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 23a:	f1 cf       	rjmp	.-30     	; 0x21e <computePrimes+0xa>

0000023c <main>:
    yield();
}

int main() {
	CLK_init();
 23c:	2b df       	rcall	.-426    	; 0x94 <CLK_init>
	LCD_init();
 23e:	30 df       	rcall	.-416    	; 0xa0 <LCD_init>
	
    spawn(computePrimes, 0);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	38 d0       	rcall	.+112    	; 0x2ba <spawn>
    computePrimes(3);
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	e2 df       	rcall	.-60     	; 0x214 <computePrimes>

00000250 <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 250:	dc 01       	movw	r26, r24
 252:	15 96       	adiw	r26, 0x05	; 5
 254:	1c 92       	st	X, r1
 256:	1e 92       	st	-X, r1
 258:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 25a:	db 01       	movw	r26, r22
 25c:	ed 91       	ld	r30, X+
 25e:	fc 91       	ld	r31, X
 260:	11 97       	sbiw	r26, 0x01	; 1
 262:	30 97       	sbiw	r30, 0x00	; 0
 264:	21 f4       	brne	.+8      	; 0x26e <enqueue+0x1e>
        *queue = p;
 266:	8d 93       	st	X+, r24
 268:	9c 93       	st	X, r25
 26a:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 26c:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 26e:	24 81       	ldd	r18, Z+4	; 0x04
 270:	35 81       	ldd	r19, Z+5	; 0x05
 272:	21 15       	cp	r18, r1
 274:	31 05       	cpc	r19, r1
 276:	d1 f7       	brne	.-12     	; 0x26c <enqueue+0x1c>
            q = q->next;
        q->next = p;
 278:	95 83       	std	Z+5, r25	; 0x05
 27a:	84 83       	std	Z+4, r24	; 0x04
 27c:	08 95       	ret

0000027e <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	00 d0       	rcall	.+0      	; 0x284 <dispatch+0x6>
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	9a 83       	std	Y+2, r25	; 0x02
 28a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 28c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 290:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 294:	06 96       	adiw	r24, 0x06	; 6
 296:	f7 d0       	rcall	.+494    	; 0x486 <setjmp>
 298:	89 2b       	or	r24, r25
 29a:	51 f4       	brne	.+20     	; 0x2b0 <dispatch+0x32>
        current = next;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 2a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
        longjmp(next->context,1);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	06 96       	adiw	r24, 0x06	; 6
 2ae:	0b d1       	rcall	.+534    	; 0x4c6 <longjmp>
    }
}
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <spawn>:

void spawn(void (* function)(int), int arg) {
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <spawn+0x6>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 2c4:	f8 94       	cli
    if (!initialized) initialize();
 2c6:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 2ca:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 2ce:	23 2b       	or	r18, r19
 2d0:	e1 f4       	brne	.+56     	; 0x30a <spawn+0x50>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 2d2:	26 ef       	ldi	r18, 0xF6	; 246
 2d4:	31 e0       	ldi	r19, 0x01	; 1
 2d6:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <threads+0x5>
 2da:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <threads+0x4>
 2de:	23 e6       	ldi	r18, 0x63	; 99
 2e0:	32 e0       	ldi	r19, 0x02	; 2
 2e2:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <threads+0x72>
 2e6:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <threads+0x71>
 2ea:	20 ed       	ldi	r18, 0xD0	; 208
 2ec:	32 e0       	ldi	r19, 0x02	; 2
 2ee:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <threads+0xdf>
 2f2:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 2f6:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <threads+0x14c>
 2fa:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <threads+0x14b>


    initialized = 1;
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__data_end+0x1>
 306:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 30a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 30e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 312:	3a 83       	std	Y+2, r19	; 0x02
 314:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 316:	23 2b       	or	r18, r19
 318:	a1 f0       	breq	.+40     	; 0x342 <spawn+0x88>
        *queue = (*queue)->next;
 31a:	e9 81       	ldd	r30, Y+1	; 0x01
 31c:	fa 81       	ldd	r31, Y+2	; 0x02
 31e:	44 81       	ldd	r20, Z+4	; 0x04
 320:	55 81       	ldd	r21, Z+5	; 0x05
 322:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <freeQ+0x1>
 326:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 32a:	91 83       	std	Z+1, r25	; 0x01
 32c:	80 83       	st	Z, r24
    newp->arg = arg;
 32e:	73 83       	std	Z+3, r23	; 0x03
 330:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 332:	15 82       	std	Z+5, r1	; 0x05
 334:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 336:	cf 01       	movw	r24, r30
 338:	06 96       	adiw	r24, 0x06	; 6
 33a:	a5 d0       	rcall	.+330    	; 0x486 <setjmp>
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	39 f5       	brne	.+78     	; 0x38e <spawn+0xd4>
 340:	01 c0       	rjmp	.+2      	; 0x344 <spawn+0x8a>
 342:	ff cf       	rjmp	.-2      	; 0x342 <spawn+0x88>
        ENABLE();
 344:	78 94       	sei
        current->function(current->arg);
 346:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 34a:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 34e:	ed 91       	ld	r30, X+
 350:	fc 91       	ld	r31, X
 352:	11 97       	sbiw	r26, 0x01	; 1
 354:	12 96       	adiw	r26, 0x02	; 2
 356:	8d 91       	ld	r24, X+
 358:	9c 91       	ld	r25, X
 35a:	13 97       	sbiw	r26, 0x03	; 3
 35c:	09 95       	icall
        DISABLE();
 35e:	f8 94       	cli
        enqueue(current, &freeQ);
 360:	66 e1       	ldi	r22, 0x16	; 22
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 368:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 36c:	71 df       	rcall	.-286    	; 0x250 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 36e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 372:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
    if (*queue) {
 376:	00 97       	sbiw	r24, 0x00	; 0
 378:	49 f0       	breq	.+18     	; 0x38c <spawn+0xd2>
        *queue = (*queue)->next;
 37a:	fc 01       	movw	r30, r24
 37c:	24 81       	ldd	r18, Z+4	; 0x04
 37e:	35 81       	ldd	r19, Z+5	; 0x05
 380:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 384:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 388:	7a df       	rcall	.-268    	; 0x27e <dispatch>
 38a:	01 c0       	rjmp	.+2      	; 0x38e <spawn+0xd4>
 38c:	ff cf       	rjmp	.-2      	; 0x38c <spawn+0xd2>
    }
    SETSTACK(&newp->context, &newp->stack);
 38e:	e9 81       	ldd	r30, Y+1	; 0x01
 390:	fa 81       	ldd	r31, Y+2	; 0x02
 392:	36 96       	adiw	r30, 0x06	; 6
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	87 59       	subi	r24, 0x97	; 151
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	91 8b       	std	Z+17, r25	; 0x11
 39e:	80 8b       	std	Z+16, r24	; 0x10
 3a0:	93 8b       	std	Z+19, r25	; 0x13
 3a2:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 3a4:	6a e1       	ldi	r22, 0x1A	; 26
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	51 df       	rcall	.-350    	; 0x250 <enqueue>
    ENABLE();
 3ae:	78 94       	sei
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <__mulsi3>:
 3ba:	db 01       	movw	r26, r22
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	49 d0       	rcall	.+146    	; 0x454 <__muluhisi3>
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	a2 9f       	mul	r26, r18
 3c8:	80 0d       	add	r24, r0
 3ca:	91 1d       	adc	r25, r1
 3cc:	a3 9f       	mul	r26, r19
 3ce:	90 0d       	add	r25, r0
 3d0:	b2 9f       	mul	r27, r18
 3d2:	90 0d       	add	r25, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	08 95       	ret

000003d8 <__udivmodsi4>:
 3d8:	a1 e2       	ldi	r26, 0x21	; 33
 3da:	1a 2e       	mov	r1, r26
 3dc:	aa 1b       	sub	r26, r26
 3de:	bb 1b       	sub	r27, r27
 3e0:	fd 01       	movw	r30, r26
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__udivmodsi4_ep>

000003e4 <__udivmodsi4_loop>:
 3e4:	aa 1f       	adc	r26, r26
 3e6:	bb 1f       	adc	r27, r27
 3e8:	ee 1f       	adc	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	a2 17       	cp	r26, r18
 3ee:	b3 07       	cpc	r27, r19
 3f0:	e4 07       	cpc	r30, r20
 3f2:	f5 07       	cpc	r31, r21
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <__udivmodsi4_ep>
 3f6:	a2 1b       	sub	r26, r18
 3f8:	b3 0b       	sbc	r27, r19
 3fa:	e4 0b       	sbc	r30, r20
 3fc:	f5 0b       	sbc	r31, r21

000003fe <__udivmodsi4_ep>:
 3fe:	66 1f       	adc	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	1a 94       	dec	r1
 408:	69 f7       	brne	.-38     	; 0x3e4 <__udivmodsi4_loop>
 40a:	60 95       	com	r22
 40c:	70 95       	com	r23
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	9b 01       	movw	r18, r22
 414:	ac 01       	movw	r20, r24
 416:	bd 01       	movw	r22, r26
 418:	cf 01       	movw	r24, r30
 41a:	08 95       	ret

0000041c <__divmodsi4>:
 41c:	05 2e       	mov	r0, r21
 41e:	97 fb       	bst	r25, 7
 420:	16 f4       	brtc	.+4      	; 0x426 <__divmodsi4+0xa>
 422:	00 94       	com	r0
 424:	0f d0       	rcall	.+30     	; 0x444 <__negsi2>
 426:	57 fd       	sbrc	r21, 7
 428:	05 d0       	rcall	.+10     	; 0x434 <__divmodsi4_neg2>
 42a:	d6 df       	rcall	.-84     	; 0x3d8 <__udivmodsi4>
 42c:	07 fc       	sbrc	r0, 7
 42e:	02 d0       	rcall	.+4      	; 0x434 <__divmodsi4_neg2>
 430:	46 f4       	brtc	.+16     	; 0x442 <__divmodsi4_exit>
 432:	08 c0       	rjmp	.+16     	; 0x444 <__negsi2>

00000434 <__divmodsi4_neg2>:
 434:	50 95       	com	r21
 436:	40 95       	com	r20
 438:	30 95       	com	r19
 43a:	21 95       	neg	r18
 43c:	3f 4f       	sbci	r19, 0xFF	; 255
 43e:	4f 4f       	sbci	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255

00000442 <__divmodsi4_exit>:
 442:	08 95       	ret

00000444 <__negsi2>:
 444:	90 95       	com	r25
 446:	80 95       	com	r24
 448:	70 95       	com	r23
 44a:	61 95       	neg	r22
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8f 4f       	sbci	r24, 0xFF	; 255
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	08 95       	ret

00000454 <__muluhisi3>:
 454:	09 d0       	rcall	.+18     	; 0x468 <__umulhisi3>
 456:	a5 9f       	mul	r26, r21
 458:	90 0d       	add	r25, r0
 45a:	b4 9f       	mul	r27, r20
 45c:	90 0d       	add	r25, r0
 45e:	a4 9f       	mul	r26, r20
 460:	80 0d       	add	r24, r0
 462:	91 1d       	adc	r25, r1
 464:	11 24       	eor	r1, r1
 466:	08 95       	ret

00000468 <__umulhisi3>:
 468:	a2 9f       	mul	r26, r18
 46a:	b0 01       	movw	r22, r0
 46c:	b3 9f       	mul	r27, r19
 46e:	c0 01       	movw	r24, r0
 470:	a3 9f       	mul	r26, r19
 472:	70 0d       	add	r23, r0
 474:	81 1d       	adc	r24, r1
 476:	11 24       	eor	r1, r1
 478:	91 1d       	adc	r25, r1
 47a:	b2 9f       	mul	r27, r18
 47c:	70 0d       	add	r23, r0
 47e:	81 1d       	adc	r24, r1
 480:	11 24       	eor	r1, r1
 482:	91 1d       	adc	r25, r1
 484:	08 95       	ret

00000486 <setjmp>:
 486:	dc 01       	movw	r26, r24
 488:	2d 92       	st	X+, r2
 48a:	3d 92       	st	X+, r3
 48c:	4d 92       	st	X+, r4
 48e:	5d 92       	st	X+, r5
 490:	6d 92       	st	X+, r6
 492:	7d 92       	st	X+, r7
 494:	8d 92       	st	X+, r8
 496:	9d 92       	st	X+, r9
 498:	ad 92       	st	X+, r10
 49a:	bd 92       	st	X+, r11
 49c:	cd 92       	st	X+, r12
 49e:	dd 92       	st	X+, r13
 4a0:	ed 92       	st	X+, r14
 4a2:	fd 92       	st	X+, r15
 4a4:	0d 93       	st	X+, r16
 4a6:	1d 93       	st	X+, r17
 4a8:	cd 93       	st	X+, r28
 4aa:	dd 93       	st	X+, r29
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	8d b7       	in	r24, 0x3d	; 61
 4b2:	8d 93       	st	X+, r24
 4b4:	8e b7       	in	r24, 0x3e	; 62
 4b6:	8d 93       	st	X+, r24
 4b8:	8f b7       	in	r24, 0x3f	; 63
 4ba:	8d 93       	st	X+, r24
 4bc:	ed 93       	st	X+, r30
 4be:	fd 93       	st	X+, r31
 4c0:	88 27       	eor	r24, r24
 4c2:	99 27       	eor	r25, r25
 4c4:	09 94       	ijmp

000004c6 <longjmp>:
 4c6:	dc 01       	movw	r26, r24
 4c8:	cb 01       	movw	r24, r22
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	91 05       	cpc	r25, r1
 4ce:	81 1d       	adc	r24, r1
 4d0:	2d 90       	ld	r2, X+
 4d2:	3d 90       	ld	r3, X+
 4d4:	4d 90       	ld	r4, X+
 4d6:	5d 90       	ld	r5, X+
 4d8:	6d 90       	ld	r6, X+
 4da:	7d 90       	ld	r7, X+
 4dc:	8d 90       	ld	r8, X+
 4de:	9d 90       	ld	r9, X+
 4e0:	ad 90       	ld	r10, X+
 4e2:	bd 90       	ld	r11, X+
 4e4:	cd 90       	ld	r12, X+
 4e6:	dd 90       	ld	r13, X+
 4e8:	ed 90       	ld	r14, X+
 4ea:	fd 90       	ld	r15, X+
 4ec:	0d 91       	ld	r16, X+
 4ee:	1d 91       	ld	r17, X+
 4f0:	cd 91       	ld	r28, X+
 4f2:	dd 91       	ld	r29, X+
 4f4:	ed 91       	ld	r30, X+
 4f6:	fd 91       	ld	r31, X+
 4f8:	0d 90       	ld	r0, X+
 4fa:	f8 94       	cli
 4fc:	fe bf       	out	0x3e, r31	; 62
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	ed bf       	out	0x3d, r30	; 61
 502:	ed 91       	ld	r30, X+
 504:	fd 91       	ld	r31, X+
 506:	09 94       	ijmp

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
