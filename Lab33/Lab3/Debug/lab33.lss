
lab33.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000682  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  00800118  00800118  0000072e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001276  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2f  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a27  00000000  00000000  0000260d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000072ec  00000000  00000000  000032b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000afae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000029b9  00000000  00000000  0000b076  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	00 00       	nop
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	00 00       	nop
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	00 00       	nop
   c:	7b c1       	rjmp	.+758    	; 0x304 <__vector_3>
   e:	00 00       	nop
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	00 00       	nop
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	00 00       	nop
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c1       	rjmp	.+664    	; 0x2b6 <__vector_7>
  1e:	00 00       	nop
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	00 00       	nop
  24:	36 c0       	rjmp	.+108    	; 0x92 <__bad_interrupt>
  26:	00 00       	nop
  28:	34 c0       	rjmp	.+104    	; 0x92 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	00 00       	nop
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	00 00       	nop
  34:	2e c0       	rjmp	.+92     	; 0x92 <__bad_interrupt>
  36:	00 00       	nop
  38:	2c c0       	rjmp	.+88     	; 0x92 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2a c0       	rjmp	.+84     	; 0x92 <__bad_interrupt>
  3e:	00 00       	nop
  40:	28 c0       	rjmp	.+80     	; 0x92 <__bad_interrupt>
  42:	00 00       	nop
  44:	26 c0       	rjmp	.+76     	; 0x92 <__bad_interrupt>
  46:	00 00       	nop
  48:	24 c0       	rjmp	.+72     	; 0x92 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	22 c0       	rjmp	.+68     	; 0x92 <__bad_interrupt>
  4e:	00 00       	nop
  50:	20 c0       	rjmp	.+64     	; 0x92 <__bad_interrupt>
  52:	00 00       	nop
  54:	1e c0       	rjmp	.+60     	; 0x92 <__bad_interrupt>
  56:	00 00       	nop
  58:	1c c0       	rjmp	.+56     	; 0x92 <__bad_interrupt>
	...

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e8       	ldi	r30, 0x82	; 130
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ae 33       	cpi	r26, 0x3E	; 62
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	02 d1       	rcall	.+516    	; 0x294 <main>
  90:	f6 c2       	rjmp	.+1516   	; 0x67e <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <blinkz>:
	pp++;
	writeChar( num % 10 + '0', pp);
}

void blinkz(void){
	LCDDR13^= 0x01;
  94:	e9 ef       	ldi	r30, 0xF9	; 249
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 27       	eor	r24, r25
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <CLK_init>:
#include <avr/interrupt.h>
#include "tinythreads.h"

void CLK_init(void){
	//EN Write to PSC reg
	CLKPR = 0x80;
  a2:	e1 e6       	ldi	r30, 0x61	; 97
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
	//PSC 0
	CLKPR = 0x00;
  aa:	10 82       	st	Z, r1
  ac:	08 95       	ret

000000ae <LCD_init>:
}

void LCD_init(void){
	//		Enable LCD | LPow Waveform
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
  ae:	80 ec       	ldi	r24, 0xC0	; 192
  b0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//		Async clksrc | 1/4 Duty | 25 segments
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  b4:	87 eb       	ldi	r24, 0xB7	; 183
  b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	//		divide by 8
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	//		CC Max 3.35V
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  c6:	08 95       	ret

000000c8 <TIM_init>:
}

void TIM_init(void){
	//		CTC				PSC 1024
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//		8MHz/1024/20
	OCR1A = 3906;
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//		Interrupt En
	TIMSK1 = (1<<OCIE1A);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0;
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	08 95       	ret

000000ea <BTN_init>:
}

void BTN_init(void){
	//		IT EN pins
	EIMSK = (1<<PCIE1);
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	8d bb       	out	0x1d, r24	; 29
	//		IT EN pin 15
	PCMSK1 = (1<<PCINT15);
  ee:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	//		Pullup
	PORTB = (1<<PINB7);
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret

000000f6 <writeChar>:
}

uint16_t charNrStencils[10] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x1B51};
void writeChar(char c, int pos){
  f6:	ab 01       	movw	r20, r22
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;
  f8:	80 53       	subi	r24, 0x30	; 48

	uint8_t shift = pos%2 ? 0x04 : 0x00;
  fa:	60 ff       	sbrs	r22, 0
  fc:	03 c0       	rjmp	.+6      	; 0x104 <writeChar+0xe>
  fe:	74 e0       	ldi	r23, 0x04	; 4
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
 100:	af e0       	ldi	r26, 0x0F	; 15
 102:	02 c0       	rjmp	.+4      	; 0x108 <writeChar+0x12>
void writeChar(char c, int pos){
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;

	uint8_t shift = pos%2 ? 0x04 : 0x00;
 104:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
 106:	a0 ef       	ldi	r26, 0xF0	; 240
	uint16_t stencil = charNrStencils[ch];
 108:	e8 2f       	mov	r30, r24
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	20 81       	ld	r18, Z
 116:	31 81       	ldd	r19, Z+1	; 0x01

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
 118:	fa 01       	movw	r30, r20
 11a:	ff 23       	and	r31, r31
 11c:	0c f4       	brge	.+2      	; 0x120 <writeChar+0x2a>
 11e:	31 96       	adiw	r30, 0x01	; 1
 120:	f5 95       	asr	r31
 122:	e7 95       	ror	r30
 124:	e4 51       	subi	r30, 0x14	; 20
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	af 01       	movw	r20, r30
 12a:	4c 5e       	subi	r20, 0xEC	; 236
 12c:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
 12e:	c9 01       	movw	r24, r18
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	99 27       	eor	r25, r25
 134:	07 2e       	mov	r0, r23
 136:	02 c0       	rjmp	.+4      	; 0x13c <writeChar+0x46>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <writeChar+0x42>
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
 140:	90 81       	ld	r25, Z
 142:	9a 23       	and	r25, r26
		*memPtr|= (stencil & 0x0F) << shift;
 144:	89 2b       	or	r24, r25
 146:	80 83       	st	Z, r24
		stencil>>= 0x04;
 148:	32 95       	swap	r19
 14a:	22 95       	swap	r18
 14c:	2f 70       	andi	r18, 0x0F	; 15
 14e:	23 27       	eor	r18, r19
 150:	3f 70       	andi	r19, 0x0F	; 15
 152:	23 27       	eor	r18, r19
		memPtr+= 0x05;
 154:	35 96       	adiw	r30, 0x05	; 5
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
 156:	e4 17       	cp	r30, r20
 158:	f5 07       	cpc	r31, r21
 15a:	49 f7       	brne	.-46     	; 0x12e <writeChar+0x38>
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
		stencil>>= 0x04;
		memPtr+= 0x05;
	}
}
 15c:	08 95       	ret

0000015e <is_prime>:

int is_prime(long nr){
 15e:	8f 92       	push	r8
 160:	9f 92       	push	r9
 162:	af 92       	push	r10
 164:	bf 92       	push	r11
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	4b 01       	movw	r8, r22
 170:	5c 01       	movw	r10, r24
	for(unsigned long i = 2; i*i < nr; i++)
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	88 16       	cp	r8, r24
 176:	91 04       	cpc	r9, r1
 178:	a1 04       	cpc	r10, r1
 17a:	b1 04       	cpc	r11, r1
 17c:	18 f1       	brcs	.+70     	; 0x1c4 <is_prime+0x66>
		if(!(nr%i))
 17e:	80 fe       	sbrs	r8, 0
 180:	24 c0       	rjmp	.+72     	; 0x1ca <is_prime+0x6c>
 182:	c1 2c       	mov	r12, r1
 184:	d1 2c       	mov	r13, r1
 186:	76 01       	movw	r14, r12
 188:	68 94       	set
 18a:	c1 f8       	bld	r12, 1
 18c:	09 c0       	rjmp	.+18     	; 0x1a0 <is_prime+0x42>
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	db d1       	rcall	.+950    	; 0x54e <__udivmodsi4>
 198:	67 2b       	or	r22, r23
 19a:	68 2b       	or	r22, r24
 19c:	69 2b       	or	r22, r25
 19e:	c1 f0       	breq	.+48     	; 0x1d0 <is_prime+0x72>
		memPtr+= 0x05;
	}
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	c8 1a       	sub	r12, r24
 1a4:	d8 0a       	sbc	r13, r24
 1a6:	e8 0a       	sbc	r14, r24
 1a8:	f8 0a       	sbc	r15, r24
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	c7 01       	movw	r24, r14
 1b0:	b6 01       	movw	r22, r12
 1b2:	be d1       	rcall	.+892    	; 0x530 <__mulsi3>
 1b4:	68 15       	cp	r22, r8
 1b6:	79 05       	cpc	r23, r9
 1b8:	8a 05       	cpc	r24, r10
 1ba:	9b 05       	cpc	r25, r11
 1bc:	40 f3       	brcs	.-48     	; 0x18e <is_prime+0x30>
		if(!(nr%i))
			return 0;
	return 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <is_prime+0x76>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <is_prime+0x76>
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
		if(!(nr%i))
			return 0;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <is_prime+0x76>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	bf 90       	pop	r11
 1de:	af 90       	pop	r10
 1e0:	9f 90       	pop	r9
 1e2:	8f 90       	pop	r8
 1e4:	08 95       	ret

000001e6 <printAt>:

void printAt(long num, int pos) {
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	4b 01       	movw	r8, r22
 1fc:	5c 01       	movw	r10, r24
 1fe:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 200:	24 e6       	ldi	r18, 0x64	; 100
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	c4 d1       	rcall	.+904    	; 0x592 <__divmodsi4>
 20a:	0f 2e       	mov	r0, r31
 20c:	fa e0       	ldi	r31, 0x0A	; 10
 20e:	cf 2e       	mov	r12, r31
 210:	d1 2c       	mov	r13, r1
 212:	e1 2c       	mov	r14, r1
 214:	f1 2c       	mov	r15, r1
 216:	f0 2d       	mov	r31, r0
 218:	a7 01       	movw	r20, r14
 21a:	96 01       	movw	r18, r12
 21c:	ba d1       	rcall	.+884    	; 0x592 <__divmodsi4>
 21e:	be 01       	movw	r22, r28
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	82 0f       	add	r24, r18
 224:	68 df       	rcall	.-304    	; 0xf6 <writeChar>
	pp++;
 226:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 228:	c5 01       	movw	r24, r10
 22a:	b4 01       	movw	r22, r8
 22c:	a7 01       	movw	r20, r14
 22e:	96 01       	movw	r18, r12
 230:	b0 d1       	rcall	.+864    	; 0x592 <__divmodsi4>
 232:	86 2f       	mov	r24, r22
 234:	be 01       	movw	r22, r28
 236:	80 5d       	subi	r24, 0xD0	; 208
 238:	5e df       	rcall	.-324    	; 0xf6 <writeChar>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	9f 90       	pop	r9
 24c:	8f 90       	pop	r8
 24e:	08 95       	ret

00000250 <birdUp>:
	LCDDR13^= 0x01;
}

uint8_t cnt = 0;
void birdUp(void){
	printAt(cnt,4);
 250:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	44 e0       	ldi	r20, 0x04	; 4
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	c3 df       	rcall	.-122    	; 0x1e6 <printAt>
	cnt++;
 260:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 26a:	08 95       	ret

0000026c <computePrimes>:
}

void computePrimes(int pos) {
 26c:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 26e:	c1 2c       	mov	r12, r1
 270:	d1 2c       	mov	r13, r1
 272:	76 01       	movw	r14, r12
 274:	c3 94       	inc	r12
		if (is_prime(n)) {
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	71 df       	rcall	.-286    	; 0x15e <is_prime>
 27c:	89 2b       	or	r24, r25
 27e:	21 f0       	breq	.+8      	; 0x288 <computePrimes+0x1c>
			printAt(n, pos);
 280:	ae 01       	movw	r20, r28
 282:	c7 01       	movw	r24, r14
 284:	b6 01       	movw	r22, r12
 286:	af df       	rcall	.-162    	; 0x1e6 <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	c8 1a       	sub	r12, r24
 28c:	d8 0a       	sbc	r13, r24
 28e:	e8 0a       	sbc	r14, r24
 290:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
			//yield();
		}
	}
 292:	f1 cf       	rjmp	.-30     	; 0x276 <computePrimes+0xa>

00000294 <main>:
}

int main() {
	CLK_init();
 294:	06 df       	rcall	.-500    	; 0xa2 <CLK_init>
	LCD_init();
 296:	0b df       	rcall	.-490    	; 0xae <LCD_init>
	BTN_init();
 298:	28 df       	rcall	.-432    	; 0xea <BTN_init>
	TIM_init();
 29a:	16 df       	rcall	.-468    	; 0xc8 <TIM_init>
	
	spawn(birdUp, 0);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	af d0       	rcall	.+350    	; 0x404 <spawn>
	spawn(blinkz, 0);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	8a e4       	ldi	r24, 0x4A	; 74
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	aa d0       	rcall	.+340    	; 0x404 <spawn>
	computePrimes(0);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	db df       	rcall	.-74     	; 0x26c <computePrimes>

000002b6 <__vector_7>:
}

ISR(TIMER1_COMPA_vect){ // TIM IE
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	spawn(blinkz,0);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	8a e4       	ldi	r24, 0x4A	; 74
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	91 d0       	rcall	.+290    	; 0x404 <spawn>
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_3>:

ISR(PCINT1_vect) { // BTN IE
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	if(!(PINB & (1<<PINB7))){
 326:	1f 99       	sbic	0x03, 7	; 3
 328:	06 c0       	rjmp	.+12     	; 0x336 <__vector_3+0x32>
		spawn(birdUp,0);
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	88 e2       	ldi	r24, 0x28	; 40
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	68 d0       	rcall	.+208    	; 0x404 <spawn>
		yield();
 334:	42 d0       	rcall	.+132    	; 0x3ba <yield>
	}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <dequeue>:
		p->next = q;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 358:	dc 01       	movw	r26, r24
 35a:	ed 91       	ld	r30, X+
 35c:	fc 91       	ld	r31, X
 35e:	11 97       	sbiw	r26, 0x01	; 1
	if (*queue) {
 360:	30 97       	sbiw	r30, 0x00	; 0
 362:	39 f4       	brne	.+14     	; 0x372 <dequeue+0x1a>
		*queue = (*queue)->next;
	} else {
		// Empty queue, kernel panic!!!
		LCDDR8^= 0x1;
 364:	e4 ef       	ldi	r30, 0xF4	; 244
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	90 81       	ld	r25, Z
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	89 27       	eor	r24, r25
 36e:	80 83       	st	Z, r24
		while (1);  // not much else to do...
 370:	ff cf       	rjmp	.-2      	; 0x370 <dequeue+0x18>
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 372:	24 81       	ldd	r18, Z+4	; 0x04
 374:	35 81       	ldd	r19, Z+5	; 0x05
 376:	2d 93       	st	X+, r18
 378:	3c 93       	st	X, r19
		// Empty queue, kernel panic!!!
		LCDDR8^= 0x1;
		while (1);  // not much else to do...
	}
	return p;
}
 37a:	cf 01       	movw	r24, r30
 37c:	08 95       	ret

0000037e <dispatch>:

static void dispatch(thread next) {
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <dispatch+0x6>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 38c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 390:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 394:	06 96       	adiw	r24, 0x06	; 6
 396:	32 d1       	rcall	.+612    	; 0x5fc <setjmp>
 398:	89 2b       	or	r24, r25
 39a:	51 f4       	brne	.+20     	; 0x3b0 <dispatch+0x32>
		current = next;
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	9a 81       	ldd	r25, Y+2	; 0x02
 3a0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 3a4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
		longjmp(next->context,1);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	06 96       	adiw	r24, 0x06	; 6
 3ae:	46 d1       	rcall	.+652    	; 0x63c <longjmp>
	}
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <yield>:
	ENABLE();
	yield();
}

void yield(void) {
	DISABLE();
 3ba:	f8 94       	cli
	if(readyQ != NULL){
 3bc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <readyQ>
 3c0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <readyQ+0x1>
 3c4:	89 2b       	or	r24, r25
 3c6:	e1 f0       	breq	.+56     	; 0x400 <__LOCK_REGION_LENGTH__>
		thread next = dequeue(&readyQ);
 3c8:	8b e1       	ldi	r24, 0x1B	; 27
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	c5 df       	rcall	.-118    	; 0x358 <dequeue>
		enqueue(current, &readyQ);
 3ce:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <current>
 3d2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <current+0x1>
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 3d6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <readyQ>
 3da:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <readyQ+0x1>
 3de:	21 15       	cp	r18, r1
 3e0:	31 05       	cpc	r19, r1
 3e2:	39 f4       	brne	.+14     	; 0x3f2 <yield+0x38>
		p->next = NULL;
 3e4:	15 82       	std	Z+5, r1	; 0x05
 3e6:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 3e8:	f0 93 1c 01 	sts	0x011C, r31	; 0x80011c <readyQ+0x1>
 3ec:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <readyQ>
 3f0:	06 c0       	rjmp	.+12     	; 0x3fe <yield+0x44>
	} else {
		thread q = *queue;
		*queue = p;
 3f2:	f0 93 1c 01 	sts	0x011C, r31	; 0x80011c <readyQ+0x1>
 3f6:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <readyQ>
		p->next = q;
 3fa:	35 83       	std	Z+5, r19	; 0x05
 3fc:	24 83       	std	Z+4, r18	; 0x04
void yield(void) {
	DISABLE();
	if(readyQ != NULL){
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
		dispatch(next);
 3fe:	bf df       	rcall	.-130    	; 0x37e <dispatch>
	}
	ENABLE();
 400:	78 94       	sei
 402:	08 95       	ret

00000404 <spawn>:
		current = next;
		longjmp(next->context,1);
	}
}

void spawn(void (* function)(int), int arg) {
 404:	ef 92       	push	r14
 406:	ff 92       	push	r15
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <spawn+0xe>
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	7c 01       	movw	r14, r24
 418:	8b 01       	movw	r16, r22
	thread newp;

	DISABLE();
 41a:	f8 94       	cli
	if (!initialized) initialize();
 41c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <initialized>
 420:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <initialized+0x1>
 424:	89 2b       	or	r24, r25
 426:	e1 f4       	brne	.+56     	; 0x460 <spawn+0x5c>
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
		threads[i].next = &threads[i+1];
 428:	87 ef       	ldi	r24, 0xF7	; 247
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <threads+0x5>
 430:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <threads+0x4>
 434:	84 e6       	ldi	r24, 0x64	; 100
 436:	92 e0       	ldi	r25, 0x02	; 2
 438:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <threads+0x72>
 43c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <threads+0x71>
 440:	81 ed       	ldi	r24, 0xD1	; 209
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <threads+0xdf>
 448:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 44c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <threads+0x14c>
 450:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <threads+0x14b>
	
	initialized = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <initialized+0x1>
 45c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <initialized>
	thread newp;

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
 460:	86 e1       	ldi	r24, 0x16	; 22
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	79 df       	rcall	.-270    	; 0x358 <dequeue>
 466:	9a 83       	std	Y+2, r25	; 0x02
 468:	89 83       	std	Y+1, r24	; 0x01
	newp->function = function;
 46a:	fc 01       	movw	r30, r24
 46c:	f1 82       	std	Z+1, r15	; 0x01
 46e:	e0 82       	st	Z, r14
	newp->arg = arg;
 470:	13 83       	std	Z+3, r17	; 0x03
 472:	02 83       	std	Z+2, r16	; 0x02
	newp->next = NULL;
 474:	15 82       	std	Z+5, r1	; 0x05
 476:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 478:	06 96       	adiw	r24, 0x06	; 6
 47a:	c0 d0       	rcall	.+384    	; 0x5fc <setjmp>
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	51 f5       	brne	.+84     	; 0x4d4 <spawn+0xd0>
		ENABLE();
 480:	78 94       	sei
		current->function(current->arg);
 482:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 486:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 48a:	ed 91       	ld	r30, X+
 48c:	fc 91       	ld	r31, X
 48e:	11 97       	sbiw	r26, 0x01	; 1
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	8d 91       	ld	r24, X+
 494:	9c 91       	ld	r25, X
 496:	13 97       	sbiw	r26, 0x03	; 3
 498:	09 95       	icall
		DISABLE();
 49a:	f8 94       	cli
		thread next = dequeue(&readyQ);
 49c:	8b e1       	ldi	r24, 0x1B	; 27
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	5b df       	rcall	.-330    	; 0x358 <dequeue>
		enqueue(current, &freeQ);
 4a2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <current>
 4a6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <current+0x1>
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 4aa:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 4ae:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 4b2:	21 15       	cp	r18, r1
 4b4:	31 05       	cpc	r19, r1
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <spawn+0xc2>
		p->next = NULL;
 4b8:	15 82       	std	Z+5, r1	; 0x05
 4ba:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 4bc:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <freeQ+0x1>
 4c0:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <freeQ>
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <spawn+0xce>
	} else {
		thread q = *queue;
		*queue = p;
 4c6:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <freeQ+0x1>
 4ca:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <freeQ>
		p->next = q;
 4ce:	35 83       	std	Z+5, r19	; 0x05
 4d0:	24 83       	std	Z+4, r18	; 0x04
		ENABLE();
		current->function(current->arg);
		DISABLE();
		thread next = dequeue(&readyQ);
		enqueue(current, &freeQ);
		dispatch(next);
 4d2:	55 df       	rcall	.-342    	; 0x37e <dispatch>
	}
	SETSTACK(&newp->context, &newp->stack);
 4d4:	e9 81       	ldd	r30, Y+1	; 0x01
 4d6:	fa 81       	ldd	r31, Y+2	; 0x02
 4d8:	36 96       	adiw	r30, 0x06	; 6
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	9a 81       	ldd	r25, Y+2	; 0x02
 4de:	87 59       	subi	r24, 0x97	; 151
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	91 8b       	std	Z+17, r25	; 0x11
 4e4:	80 8b       	std	Z+16, r24	; 0x10
 4e6:	93 8b       	std	Z+19, r25	; 0x13
 4e8:	82 8b       	std	Z+18, r24	; 0x12
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 4ea:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <readyQ>
 4ee:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <readyQ+0x1>
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	49 f4       	brne	.+18     	; 0x508 <__stack+0x9>
		p->next = NULL;
 4f6:	e9 81       	ldd	r30, Y+1	; 0x01
 4f8:	fa 81       	ldd	r31, Y+2	; 0x02
 4fa:	15 82       	std	Z+5, r1	; 0x05
 4fc:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 4fe:	f0 93 1c 01 	sts	0x011C, r31	; 0x80011c <readyQ+0x1>
 502:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <readyQ>
 506:	09 c0       	rjmp	.+18     	; 0x51a <__stack+0x1b>
	} else {
		thread q = *queue;
		*queue = p;
 508:	29 81       	ldd	r18, Y+1	; 0x01
 50a:	3a 81       	ldd	r19, Y+2	; 0x02
 50c:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <readyQ+0x1>
 510:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <readyQ>
		p->next = q;
 514:	f9 01       	movw	r30, r18
 516:	95 83       	std	Z+5, r25	; 0x05
 518:	84 83       	std	Z+4, r24	; 0x04
		dispatch(next);
	}
	SETSTACK(&newp->context, &newp->stack);

	enqueue(newp, &readyQ);
	ENABLE();
 51a:	78 94       	sei
	yield();
 51c:	4e df       	rcall	.-356    	; 0x3ba <yield>
}
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	08 95       	ret

00000530 <__mulsi3>:
 530:	db 01       	movw	r26, r22
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
 536:	49 d0       	rcall	.+146    	; 0x5ca <__muluhisi3>
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	a2 9f       	mul	r26, r18
 53e:	80 0d       	add	r24, r0
 540:	91 1d       	adc	r25, r1
 542:	a3 9f       	mul	r26, r19
 544:	90 0d       	add	r25, r0
 546:	b2 9f       	mul	r27, r18
 548:	90 0d       	add	r25, r0
 54a:	11 24       	eor	r1, r1
 54c:	08 95       	ret

0000054e <__udivmodsi4>:
 54e:	a1 e2       	ldi	r26, 0x21	; 33
 550:	1a 2e       	mov	r1, r26
 552:	aa 1b       	sub	r26, r26
 554:	bb 1b       	sub	r27, r27
 556:	fd 01       	movw	r30, r26
 558:	0d c0       	rjmp	.+26     	; 0x574 <__udivmodsi4_ep>

0000055a <__udivmodsi4_loop>:
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	ee 1f       	adc	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	a2 17       	cp	r26, r18
 564:	b3 07       	cpc	r27, r19
 566:	e4 07       	cpc	r30, r20
 568:	f5 07       	cpc	r31, r21
 56a:	20 f0       	brcs	.+8      	; 0x574 <__udivmodsi4_ep>
 56c:	a2 1b       	sub	r26, r18
 56e:	b3 0b       	sbc	r27, r19
 570:	e4 0b       	sbc	r30, r20
 572:	f5 0b       	sbc	r31, r21

00000574 <__udivmodsi4_ep>:
 574:	66 1f       	adc	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	1a 94       	dec	r1
 57e:	69 f7       	brne	.-38     	; 0x55a <__udivmodsi4_loop>
 580:	60 95       	com	r22
 582:	70 95       	com	r23
 584:	80 95       	com	r24
 586:	90 95       	com	r25
 588:	9b 01       	movw	r18, r22
 58a:	ac 01       	movw	r20, r24
 58c:	bd 01       	movw	r22, r26
 58e:	cf 01       	movw	r24, r30
 590:	08 95       	ret

00000592 <__divmodsi4>:
 592:	05 2e       	mov	r0, r21
 594:	97 fb       	bst	r25, 7
 596:	16 f4       	brtc	.+4      	; 0x59c <__divmodsi4+0xa>
 598:	00 94       	com	r0
 59a:	0f d0       	rcall	.+30     	; 0x5ba <__negsi2>
 59c:	57 fd       	sbrc	r21, 7
 59e:	05 d0       	rcall	.+10     	; 0x5aa <__divmodsi4_neg2>
 5a0:	d6 df       	rcall	.-84     	; 0x54e <__udivmodsi4>
 5a2:	07 fc       	sbrc	r0, 7
 5a4:	02 d0       	rcall	.+4      	; 0x5aa <__divmodsi4_neg2>
 5a6:	46 f4       	brtc	.+16     	; 0x5b8 <__divmodsi4_exit>
 5a8:	08 c0       	rjmp	.+16     	; 0x5ba <__negsi2>

000005aa <__divmodsi4_neg2>:
 5aa:	50 95       	com	r21
 5ac:	40 95       	com	r20
 5ae:	30 95       	com	r19
 5b0:	21 95       	neg	r18
 5b2:	3f 4f       	sbci	r19, 0xFF	; 255
 5b4:	4f 4f       	sbci	r20, 0xFF	; 255
 5b6:	5f 4f       	sbci	r21, 0xFF	; 255

000005b8 <__divmodsi4_exit>:
 5b8:	08 95       	ret

000005ba <__negsi2>:
 5ba:	90 95       	com	r25
 5bc:	80 95       	com	r24
 5be:	70 95       	com	r23
 5c0:	61 95       	neg	r22
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__muluhisi3>:
 5ca:	09 d0       	rcall	.+18     	; 0x5de <__umulhisi3>
 5cc:	a5 9f       	mul	r26, r21
 5ce:	90 0d       	add	r25, r0
 5d0:	b4 9f       	mul	r27, r20
 5d2:	90 0d       	add	r25, r0
 5d4:	a4 9f       	mul	r26, r20
 5d6:	80 0d       	add	r24, r0
 5d8:	91 1d       	adc	r25, r1
 5da:	11 24       	eor	r1, r1
 5dc:	08 95       	ret

000005de <__umulhisi3>:
 5de:	a2 9f       	mul	r26, r18
 5e0:	b0 01       	movw	r22, r0
 5e2:	b3 9f       	mul	r27, r19
 5e4:	c0 01       	movw	r24, r0
 5e6:	a3 9f       	mul	r26, r19
 5e8:	70 0d       	add	r23, r0
 5ea:	81 1d       	adc	r24, r1
 5ec:	11 24       	eor	r1, r1
 5ee:	91 1d       	adc	r25, r1
 5f0:	b2 9f       	mul	r27, r18
 5f2:	70 0d       	add	r23, r0
 5f4:	81 1d       	adc	r24, r1
 5f6:	11 24       	eor	r1, r1
 5f8:	91 1d       	adc	r25, r1
 5fa:	08 95       	ret

000005fc <setjmp>:
 5fc:	dc 01       	movw	r26, r24
 5fe:	2d 92       	st	X+, r2
 600:	3d 92       	st	X+, r3
 602:	4d 92       	st	X+, r4
 604:	5d 92       	st	X+, r5
 606:	6d 92       	st	X+, r6
 608:	7d 92       	st	X+, r7
 60a:	8d 92       	st	X+, r8
 60c:	9d 92       	st	X+, r9
 60e:	ad 92       	st	X+, r10
 610:	bd 92       	st	X+, r11
 612:	cd 92       	st	X+, r12
 614:	dd 92       	st	X+, r13
 616:	ed 92       	st	X+, r14
 618:	fd 92       	st	X+, r15
 61a:	0d 93       	st	X+, r16
 61c:	1d 93       	st	X+, r17
 61e:	cd 93       	st	X+, r28
 620:	dd 93       	st	X+, r29
 622:	ff 91       	pop	r31
 624:	ef 91       	pop	r30
 626:	8d b7       	in	r24, 0x3d	; 61
 628:	8d 93       	st	X+, r24
 62a:	8e b7       	in	r24, 0x3e	; 62
 62c:	8d 93       	st	X+, r24
 62e:	8f b7       	in	r24, 0x3f	; 63
 630:	8d 93       	st	X+, r24
 632:	ed 93       	st	X+, r30
 634:	fd 93       	st	X+, r31
 636:	88 27       	eor	r24, r24
 638:	99 27       	eor	r25, r25
 63a:	09 94       	ijmp

0000063c <longjmp>:
 63c:	dc 01       	movw	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	91 05       	cpc	r25, r1
 644:	81 1d       	adc	r24, r1
 646:	2d 90       	ld	r2, X+
 648:	3d 90       	ld	r3, X+
 64a:	4d 90       	ld	r4, X+
 64c:	5d 90       	ld	r5, X+
 64e:	6d 90       	ld	r6, X+
 650:	7d 90       	ld	r7, X+
 652:	8d 90       	ld	r8, X+
 654:	9d 90       	ld	r9, X+
 656:	ad 90       	ld	r10, X+
 658:	bd 90       	ld	r11, X+
 65a:	cd 90       	ld	r12, X+
 65c:	dd 90       	ld	r13, X+
 65e:	ed 90       	ld	r14, X+
 660:	fd 90       	ld	r15, X+
 662:	0d 91       	ld	r16, X+
 664:	1d 91       	ld	r17, X+
 666:	cd 91       	ld	r28, X+
 668:	dd 91       	ld	r29, X+
 66a:	ed 91       	ld	r30, X+
 66c:	fd 91       	ld	r31, X+
 66e:	0d 90       	ld	r0, X+
 670:	f8 94       	cli
 672:	fe bf       	out	0x3e, r31	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	ed bf       	out	0x3d, r30	; 61
 678:	ed 91       	ld	r30, X+
 67a:	fd 91       	ld	r31, X+
 67c:	09 94       	ijmp

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
