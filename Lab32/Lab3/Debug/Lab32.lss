
Lab32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000071c  000007b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800120  00800120  000007d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001336  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b56  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6d  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000072f3  00000000  00000000  00003488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a29  00000000  00000000  0000a77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000b1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000029b9  00000000  00000000  0000b26c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	00 00       	nop
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	00 00       	nop
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c1       	rjmp	.+762    	; 0x308 <__vector_3>
   e:	00 00       	nop
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	00 00       	nop
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	00 00       	nop
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c1       	rjmp	.+672    	; 0x2be <__vector_7>
  1e:	00 00       	nop
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	00 00       	nop
  24:	36 c0       	rjmp	.+108    	; 0x92 <__bad_interrupt>
  26:	00 00       	nop
  28:	34 c0       	rjmp	.+104    	; 0x92 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	00 00       	nop
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	00 00       	nop
  34:	2e c0       	rjmp	.+92     	; 0x92 <__bad_interrupt>
  36:	00 00       	nop
  38:	2c c0       	rjmp	.+88     	; 0x92 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2a c0       	rjmp	.+84     	; 0x92 <__bad_interrupt>
  3e:	00 00       	nop
  40:	28 c0       	rjmp	.+80     	; 0x92 <__bad_interrupt>
  42:	00 00       	nop
  44:	26 c0       	rjmp	.+76     	; 0x92 <__bad_interrupt>
  46:	00 00       	nop
  48:	24 c0       	rjmp	.+72     	; 0x92 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	22 c0       	rjmp	.+68     	; 0x92 <__bad_interrupt>
  4e:	00 00       	nop
  50:	20 c0       	rjmp	.+64     	; 0x92 <__bad_interrupt>
  52:	00 00       	nop
  54:	1e c0       	rjmp	.+60     	; 0x92 <__bad_interrupt>
  56:	00 00       	nop
  58:	1c c0       	rjmp	.+56     	; 0x92 <__bad_interrupt>
	...

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e1       	ldi	r30, 0x1C	; 28
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 32       	cpi	r26, 0x20	; 32
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a0 e2       	ldi	r26, 0x20	; 32
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 34       	cpi	r26, 0x45	; 69
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	04 d1       	rcall	.+520    	; 0x298 <main>
  90:	43 c3       	rjmp	.+1670   	; 0x718 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <blinkz>:

mutex mblinkz = MUTEX_INIT;
void blinkz(void){
	for(;;){
		lock(&mblinkz);
		LCDDR13^= 0x01;
  94:	c9 ef       	ldi	r28, 0xF9	; 249
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	11 e0       	ldi	r17, 0x01	; 1
}

mutex mblinkz = MUTEX_INIT;
void blinkz(void){
	for(;;){
		lock(&mblinkz);
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	47 d2       	rcall	.+1166   	; 0x52e <lock>
		LCDDR13^= 0x01;
  a0:	88 81       	ld	r24, Y
  a2:	81 27       	eor	r24, r17
  a4:	88 83       	st	Y, r24
	}
  a6:	f9 cf       	rjmp	.-14     	; 0x9a <blinkz+0x6>

000000a8 <CLK_init>:
#include <avr/interrupt.h>
#include "tinythreads.h"

void CLK_init(void){
	//EN Write to PSC reg
	CLKPR = 0x80;
  a8:	e1 e6       	ldi	r30, 0x61	; 97
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	//PSC 0
	CLKPR = 0x00;
  b0:	10 82       	st	Z, r1
  b2:	08 95       	ret

000000b4 <LCD_init>:
}

void LCD_init(void){
	//		Enable LCD | LPow Waveform
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	//		Async clksrc | 1/4 Duty | 25 segments
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
  ba:	87 eb       	ldi	r24, 0xB7	; 183
  bc:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	//		divide by 8
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
  c0:	87 e0       	ldi	r24, 0x07	; 7
  c2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	//		CC Max 3.35V
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  cc:	08 95       	ret

000000ce <TIM_init>:
}

void TIM_init(void){
	//		CTC				PSC 1024
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//		8MHz/1024/20
	OCR1A = 3906;
  d4:	82 e4       	ldi	r24, 0x42	; 66
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//		Interrupt En
	TIMSK1 = (1<<OCIE1A);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0;
  e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ee:	08 95       	ret

000000f0 <BTN_init>:
}

void BTN_init(void){
	//		IT EN pins
	EIMSK = (1<<PCIE1);
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	8d bb       	out	0x1d, r24	; 29
	//		IT EN pin 15
	PCMSK1 = (1<<PCINT15);
  f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	//		Pullup
	PORTB = (1<<PINB7);
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	08 95       	ret

000000fc <writeChar>:
}

uint16_t charNrStencils[10] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x1B51};
void writeChar(char c, int pos){
  fc:	ab 01       	movw	r20, r22
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;
  fe:	80 53       	subi	r24, 0x30	; 48

	uint8_t shift = pos%2 ? 0x04 : 0x00;
 100:	60 ff       	sbrs	r22, 0
 102:	03 c0       	rjmp	.+6      	; 0x10a <writeChar+0xe>
 104:	74 e0       	ldi	r23, 0x04	; 4
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
 106:	af e0       	ldi	r26, 0x0F	; 15
 108:	02 c0       	rjmp	.+4      	; 0x10e <writeChar+0x12>
void writeChar(char c, int pos){
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;

	uint8_t shift = pos%2 ? 0x04 : 0x00;
 10a:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
 10c:	a0 ef       	ldi	r26, 0xF0	; 240
	uint16_t stencil = charNrStencils[ch];
 10e:	e8 2f       	mov	r30, r24
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	e8 5f       	subi	r30, 0xF8	; 248
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	20 81       	ld	r18, Z
 11c:	31 81       	ldd	r19, Z+1	; 0x01

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
 11e:	fa 01       	movw	r30, r20
 120:	ff 23       	and	r31, r31
 122:	0c f4       	brge	.+2      	; 0x126 <writeChar+0x2a>
 124:	31 96       	adiw	r30, 0x01	; 1
 126:	f5 95       	asr	r31
 128:	e7 95       	ror	r30
 12a:	e4 51       	subi	r30, 0x14	; 20
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	af 01       	movw	r20, r30
 130:	4c 5e       	subi	r20, 0xEC	; 236
 132:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
 134:	c9 01       	movw	r24, r18
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	99 27       	eor	r25, r25
 13a:	07 2e       	mov	r0, r23
 13c:	02 c0       	rjmp	.+4      	; 0x142 <writeChar+0x46>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <writeChar+0x42>
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
 146:	90 81       	ld	r25, Z
 148:	9a 23       	and	r25, r26
		*memPtr|= (stencil & 0x0F) << shift;
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
		stencil>>= 0x04;
 14e:	32 95       	swap	r19
 150:	22 95       	swap	r18
 152:	2f 70       	andi	r18, 0x0F	; 15
 154:	23 27       	eor	r18, r19
 156:	3f 70       	andi	r19, 0x0F	; 15
 158:	23 27       	eor	r18, r19
		memPtr+= 0x05;
 15a:	35 96       	adiw	r30, 0x05	; 5
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
 15c:	e4 17       	cp	r30, r20
 15e:	f5 07       	cpc	r31, r21
 160:	49 f7       	brne	.-46     	; 0x134 <writeChar+0x38>
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
		stencil>>= 0x04;
		memPtr+= 0x05;
	}
}
 162:	08 95       	ret

00000164 <is_prime>:

int is_prime(long nr){
 164:	8f 92       	push	r8
 166:	9f 92       	push	r9
 168:	af 92       	push	r10
 16a:	bf 92       	push	r11
 16c:	cf 92       	push	r12
 16e:	df 92       	push	r13
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	4b 01       	movw	r8, r22
 176:	5c 01       	movw	r10, r24
	for(unsigned long i = 2; i*i < nr; i++)
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	88 16       	cp	r8, r24
 17c:	91 04       	cpc	r9, r1
 17e:	a1 04       	cpc	r10, r1
 180:	b1 04       	cpc	r11, r1
 182:	18 f1       	brcs	.+70     	; 0x1ca <is_prime+0x66>
		if(!(nr%i))
 184:	80 fe       	sbrs	r8, 0
 186:	24 c0       	rjmp	.+72     	; 0x1d0 <is_prime+0x6c>
 188:	c1 2c       	mov	r12, r1
 18a:	d1 2c       	mov	r13, r1
 18c:	76 01       	movw	r14, r12
 18e:	68 94       	set
 190:	c1 f8       	bld	r12, 1
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <is_prime+0x42>
 194:	c5 01       	movw	r24, r10
 196:	b4 01       	movw	r22, r8
 198:	a7 01       	movw	r20, r14
 19a:	96 01       	movw	r18, r12
 19c:	25 d2       	rcall	.+1098   	; 0x5e8 <__udivmodsi4>
 19e:	67 2b       	or	r22, r23
 1a0:	68 2b       	or	r22, r24
 1a2:	69 2b       	or	r22, r25
 1a4:	c1 f0       	breq	.+48     	; 0x1d6 <is_prime+0x72>
		memPtr+= 0x05;
	}
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	c8 1a       	sub	r12, r24
 1aa:	d8 0a       	sbc	r13, r24
 1ac:	e8 0a       	sbc	r14, r24
 1ae:	f8 0a       	sbc	r15, r24
 1b0:	a7 01       	movw	r20, r14
 1b2:	96 01       	movw	r18, r12
 1b4:	c7 01       	movw	r24, r14
 1b6:	b6 01       	movw	r22, r12
 1b8:	08 d2       	rcall	.+1040   	; 0x5ca <__mulsi3>
 1ba:	68 15       	cp	r22, r8
 1bc:	79 05       	cpc	r23, r9
 1be:	8a 05       	cpc	r24, r10
 1c0:	9b 05       	cpc	r25, r11
 1c2:	40 f3       	brcs	.-48     	; 0x194 <is_prime+0x30>
		if(!(nr%i))
			return 0;
	return 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 c0       	rjmp	.+16     	; 0x1da <is_prime+0x76>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <is_prime+0x76>
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
		if(!(nr%i))
			return 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <is_prime+0x76>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	bf 90       	pop	r11
 1e4:	af 90       	pop	r10
 1e6:	9f 90       	pop	r9
 1e8:	8f 90       	pop	r8
 1ea:	08 95       	ret

000001ec <printAt>:

void printAt(long num, int pos) {
 1ec:	8f 92       	push	r8
 1ee:	9f 92       	push	r9
 1f0:	af 92       	push	r10
 1f2:	bf 92       	push	r11
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	4b 01       	movw	r8, r22
 202:	5c 01       	movw	r10, r24
 204:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 206:	24 e6       	ldi	r18, 0x64	; 100
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	0e d2       	rcall	.+1052   	; 0x62c <__divmodsi4>
 210:	0f 2e       	mov	r0, r31
 212:	fa e0       	ldi	r31, 0x0A	; 10
 214:	cf 2e       	mov	r12, r31
 216:	d1 2c       	mov	r13, r1
 218:	e1 2c       	mov	r14, r1
 21a:	f1 2c       	mov	r15, r1
 21c:	f0 2d       	mov	r31, r0
 21e:	a7 01       	movw	r20, r14
 220:	96 01       	movw	r18, r12
 222:	04 d2       	rcall	.+1032   	; 0x62c <__divmodsi4>
 224:	be 01       	movw	r22, r28
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	82 0f       	add	r24, r18
 22a:	68 df       	rcall	.-304    	; 0xfc <writeChar>
	pp++;
 22c:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 22e:	c5 01       	movw	r24, r10
 230:	b4 01       	movw	r22, r8
 232:	a7 01       	movw	r20, r14
 234:	96 01       	movw	r18, r12
 236:	fa d1       	rcall	.+1012   	; 0x62c <__divmodsi4>
 238:	86 2f       	mov	r24, r22
 23a:	be 01       	movw	r22, r28
 23c:	80 5d       	subi	r24, 0xD0	; 208
 23e:	5e df       	rcall	.-324    	; 0xfc <writeChar>
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	08 95       	ret

00000256 <birdUp>:
	}
}

mutex mbird = MUTEX_INIT;
void birdUp(void){
	uint8_t cnt = 0;
 256:	c0 e0       	ldi	r28, 0x00	; 0
	for(;;){
		printAt(cnt,4);
 258:	6c 2f       	mov	r22, r28
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	44 e0       	ldi	r20, 0x04	; 4
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	c3 df       	rcall	.-122    	; 0x1ec <printAt>
		lock(&mbird);
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	61 d1       	rcall	.+706    	; 0x52e <lock>
		cnt++;
 26c:	cf 5f       	subi	r28, 0xFF	; 255
	}
 26e:	f4 cf       	rjmp	.-24     	; 0x258 <birdUp+0x2>

00000270 <computePrimes>:
}

void computePrimes(int pos) {
 270:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 272:	c1 2c       	mov	r12, r1
 274:	d1 2c       	mov	r13, r1
 276:	76 01       	movw	r14, r12
 278:	c3 94       	inc	r12
		if (is_prime(n)) {
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	72 df       	rcall	.-284    	; 0x164 <is_prime>
 280:	89 2b       	or	r24, r25
 282:	21 f0       	breq	.+8      	; 0x28c <computePrimes+0x1c>
			printAt(n, pos);
 284:	ae 01       	movw	r20, r28
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	b0 df       	rcall	.-160    	; 0x1ec <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	c8 1a       	sub	r12, r24
 290:	d8 0a       	sbc	r13, r24
 292:	e8 0a       	sbc	r14, r24
 294:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
			//yield();
		}
	}
 296:	f1 cf       	rjmp	.-30     	; 0x27a <computePrimes+0xa>

00000298 <main>:
}

int main() {
	CLK_init();
 298:	07 df       	rcall	.-498    	; 0xa8 <CLK_init>
	LCD_init();
 29a:	0c df       	rcall	.-488    	; 0xb4 <LCD_init>
	BTN_init();
 29c:	29 df       	rcall	.-430    	; 0xf0 <BTN_init>
	TIM_init();
 29e:	17 df       	rcall	.-466    	; 0xce <TIM_init>
	
	spawn(birdUp, 0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	8b e2       	ldi	r24, 0x2B	; 43
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	88 d0       	rcall	.+272    	; 0x3ba <spawn>
	yield();
 2aa:	1c d1       	rcall	.+568    	; 0x4e4 <yield>
	spawn(blinkz, 0);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	8a e4       	ldi	r24, 0x4A	; 74
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	82 d0       	rcall	.+260    	; 0x3ba <spawn>
	yield();
 2b6:	16 d1       	rcall	.+556    	; 0x4e4 <yield>
	computePrimes(0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	d9 df       	rcall	.-78     	; 0x270 <computePrimes>

000002be <__vector_7>:
}

ISR(TIMER1_COMPA_vect){ // TIM IE
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	unlock(&mblinkz);
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	4c d1       	rcall	.+664    	; 0x57e <unlock>
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_3>:

ISR(PCINT1_vect) { // BTN IE
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	4f 93       	push	r20
 318:	5f 93       	push	r21
 31a:	6f 93       	push	r22
 31c:	7f 93       	push	r23
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
	if(!(PINB & (1<<PINB7))){
 32a:	1f 99       	sbic	0x03, 7	; 3
 32c:	04 c0       	rjmp	.+8      	; 0x336 <__vector_3+0x2e>
		unlock(&mbird);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	25 d1       	rcall	.+586    	; 0x57e <unlock>
		yield();
 334:	d7 d0       	rcall	.+430    	; 0x4e4 <yield>
	}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <dequeue>:
		p->next = q;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 358:	dc 01       	movw	r26, r24
 35a:	ed 91       	ld	r30, X+
 35c:	fc 91       	ld	r31, X
 35e:	11 97       	sbiw	r26, 0x01	; 1
	if (*queue) {
 360:	30 97       	sbiw	r30, 0x00	; 0
 362:	39 f4       	brne	.+14     	; 0x372 <dequeue+0x1a>
		*queue = (*queue)->next;
	} else {
		// Empty queue, kernel panic!!!
		LCDDR8^= 0x1;
 364:	e4 ef       	ldi	r30, 0xF4	; 244
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	90 81       	ld	r25, Z
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	89 27       	eor	r24, r25
 36e:	80 83       	st	Z, r24
		while (1);  // not much else to do...
 370:	ff cf       	rjmp	.-2      	; 0x370 <dequeue+0x18>
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 372:	24 81       	ldd	r18, Z+4	; 0x04
 374:	35 81       	ldd	r19, Z+5	; 0x05
 376:	2d 93       	st	X+, r18
 378:	3c 93       	st	X, r19
		// Empty queue, kernel panic!!!
		LCDDR8^= 0x1;
		while (1);  // not much else to do...
	}
	return p;
}
 37a:	cf 01       	movw	r24, r30
 37c:	08 95       	ret

0000037e <dispatch>:

static void dispatch(thread next) {
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <dispatch+0x6>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 38c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 390:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 394:	06 96       	adiw	r24, 0x06	; 6
 396:	7f d1       	rcall	.+766    	; 0x696 <setjmp>
 398:	89 2b       	or	r24, r25
 39a:	51 f4       	brne	.+20     	; 0x3b0 <dispatch+0x32>
		current = next;
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	9a 81       	ldd	r25, Y+2	; 0x02
 3a0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <current+0x1>
 3a4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <current>
		longjmp(next->context,1);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	06 96       	adiw	r24, 0x06	; 6
 3ae:	93 d1       	rcall	.+806    	; 0x6d6 <longjmp>
	}
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <spawn>:

void spawn(void (* function)(int), int arg) {
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <spawn+0xe>
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	7c 01       	movw	r14, r24
 3ce:	8b 01       	movw	r16, r22
	thread newp;

	DISABLE();
 3d0:	f8 94       	cli
	if (!initialized) initialize();
 3d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 3d6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 3da:	89 2b       	or	r24, r25
 3dc:	e1 f4       	brne	.+56     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
		threads[i].next = &threads[i+1];
 3de:	8e ef       	ldi	r24, 0xFE	; 254
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <threads+0x5>
 3e6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <threads+0x4>
 3ea:	8b e6       	ldi	r24, 0x6B	; 107
 3ec:	92 e0       	ldi	r25, 0x02	; 2
 3ee:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <threads+0x72>
 3f2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <threads+0x71>
 3f6:	88 ed       	ldi	r24, 0xD8	; 216
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <threads+0xdf>
 3fe:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 402:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <threads+0x14c>
 406:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <threads+0x14b>
	
	initialized = 1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 412:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	thread newp;

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
 416:	8e e1       	ldi	r24, 0x1E	; 30
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	9e df       	rcall	.-196    	; 0x358 <dequeue>
 41c:	9a 83       	std	Y+2, r25	; 0x02
 41e:	89 83       	std	Y+1, r24	; 0x01
	newp->function = function;
 420:	fc 01       	movw	r30, r24
 422:	f1 82       	std	Z+1, r15	; 0x01
 424:	e0 82       	st	Z, r14
	newp->arg = arg;
 426:	13 83       	std	Z+3, r17	; 0x03
 428:	02 83       	std	Z+2, r16	; 0x02
	newp->next = NULL;
 42a:	15 82       	std	Z+5, r1	; 0x05
 42c:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 42e:	06 96       	adiw	r24, 0x06	; 6
 430:	32 d1       	rcall	.+612    	; 0x696 <setjmp>
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	51 f5       	brne	.+84     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		ENABLE();
 436:	78 94       	sei
		current->function(current->arg);
 438:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <current>
 43c:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <current+0x1>
 440:	ed 91       	ld	r30, X+
 442:	fc 91       	ld	r31, X
 444:	11 97       	sbiw	r26, 0x01	; 1
 446:	12 96       	adiw	r26, 0x02	; 2
 448:	8d 91       	ld	r24, X+
 44a:	9c 91       	ld	r25, X
 44c:	13 97       	sbiw	r26, 0x03	; 3
 44e:	09 95       	icall
		DISABLE();
 450:	f8 94       	cli
		thread next = dequeue(&readyQ);
 452:	82 e2       	ldi	r24, 0x22	; 34
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	80 df       	rcall	.-256    	; 0x358 <dequeue>
		enqueue(current, &freeQ);
 458:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <current>
 45c:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <current+0x1>
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 460:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <freeQ>
 464:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <freeQ+0x1>
 468:	21 15       	cp	r18, r1
 46a:	31 05       	cpc	r19, r1
 46c:	39 f4       	brne	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		p->next = NULL;
 46e:	15 82       	std	Z+5, r1	; 0x05
 470:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 472:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <freeQ+0x1>
 476:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <freeQ>
 47a:	06 c0       	rjmp	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	} else {
		thread q = *queue;
		*queue = p;
 47c:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <freeQ+0x1>
 480:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <freeQ>
		p->next = q;
 484:	35 83       	std	Z+5, r19	; 0x05
 486:	24 83       	std	Z+4, r18	; 0x04
		ENABLE();
		current->function(current->arg);
		DISABLE();
		thread next = dequeue(&readyQ);
		enqueue(current, &freeQ);
		dispatch(next);
 488:	7a df       	rcall	.-268    	; 0x37e <dispatch>
	}
	SETSTACK(&newp->context, &newp->stack);
 48a:	e9 81       	ldd	r30, Y+1	; 0x01
 48c:	fa 81       	ldd	r31, Y+2	; 0x02
 48e:	36 96       	adiw	r30, 0x06	; 6
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	87 59       	subi	r24, 0x97	; 151
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	91 8b       	std	Z+17, r25	; 0x11
 49a:	80 8b       	std	Z+16, r24	; 0x10
 49c:	93 8b       	std	Z+19, r25	; 0x13
 49e:	82 8b       	std	Z+18, r24	; 0x12
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 4a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <readyQ>
 4a4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <readyQ+0x1>
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	49 f4       	brne	.+18     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		p->next = NULL;
 4ac:	e9 81       	ldd	r30, Y+1	; 0x01
 4ae:	fa 81       	ldd	r31, Y+2	; 0x02
 4b0:	15 82       	std	Z+5, r1	; 0x05
 4b2:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 4b4:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <readyQ+0x1>
 4b8:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <readyQ>
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	} else {
		thread q = *queue;
		*queue = p;
 4be:	29 81       	ldd	r18, Y+1	; 0x01
 4c0:	3a 81       	ldd	r19, Y+2	; 0x02
 4c2:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <readyQ+0x1>
 4c6:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <readyQ>
		p->next = q;
 4ca:	f9 01       	movw	r30, r18
 4cc:	95 83       	std	Z+5, r25	; 0x05
 4ce:	84 83       	std	Z+4, r24	; 0x04
		dispatch(next);
	}
	SETSTACK(&newp->context, &newp->stack);

	enqueue(newp, &readyQ);
	ENABLE();
 4d0:	78 94       	sei
}
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	08 95       	ret

000004e4 <yield>:

void yield(void) {
	DISABLE();
 4e4:	f8 94       	cli
	if(readyQ != NULL){
 4e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <readyQ>
 4ea:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <readyQ+0x1>
 4ee:	89 2b       	or	r24, r25
 4f0:	e1 f0       	breq	.+56     	; 0x52a <__stack+0x2b>
		thread next = dequeue(&readyQ);
 4f2:	82 e2       	ldi	r24, 0x22	; 34
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	30 df       	rcall	.-416    	; 0x358 <dequeue>
		enqueue(current, &readyQ);
 4f8:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <current>
 4fc:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <current+0x1>
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 500:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <readyQ>
 504:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <readyQ+0x1>
 508:	21 15       	cp	r18, r1
 50a:	31 05       	cpc	r19, r1
 50c:	39 f4       	brne	.+14     	; 0x51c <__stack+0x1d>
		p->next = NULL;
 50e:	15 82       	std	Z+5, r1	; 0x05
 510:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 512:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <readyQ+0x1>
 516:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <readyQ>
 51a:	06 c0       	rjmp	.+12     	; 0x528 <__stack+0x29>
	} else {
		thread q = *queue;
		*queue = p;
 51c:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <readyQ+0x1>
 520:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <readyQ>
		p->next = q;
 524:	35 83       	std	Z+5, r19	; 0x05
 526:	24 83       	std	Z+4, r18	; 0x04
void yield(void) {
	DISABLE();
	if(readyQ != NULL){
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
		dispatch(next);
 528:	2a df       	rcall	.-428    	; 0x37e <dispatch>
	}
	ENABLE();
 52a:	78 94       	sei
 52c:	08 95       	ret

0000052e <lock>:
}

void lock(mutex *m) {
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
	DISABLE();
 532:	f8 94       	cli
	if(m->locked == 0){
 534:	fc 01       	movw	r30, r24
 536:	20 81       	ld	r18, Z
 538:	31 81       	ldd	r19, Z+1	; 0x01
 53a:	23 2b       	or	r18, r19
 53c:	29 f4       	brne	.+10     	; 0x548 <lock+0x1a>
		m->locked = 1;
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	31 83       	std	Z+1, r19	; 0x01
 544:	20 83       	st	Z, r18
 546:	17 c0       	rjmp	.+46     	; 0x576 <lock+0x48>
 548:	ec 01       	movw	r28, r24
	}else{
		thread next = dequeue(&readyQ);
 54a:	82 e2       	ldi	r24, 0x22	; 34
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	04 df       	rcall	.-504    	; 0x358 <dequeue>
		enqueue(current, &(m->waitQ));
 550:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <current>
 554:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <current+0x1>
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 558:	2a 81       	ldd	r18, Y+2	; 0x02
 55a:	3b 81       	ldd	r19, Y+3	; 0x03
 55c:	21 15       	cp	r18, r1
 55e:	31 05       	cpc	r19, r1
 560:	29 f4       	brne	.+10     	; 0x56c <lock+0x3e>
		p->next = NULL;
 562:	15 82       	std	Z+5, r1	; 0x05
 564:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 566:	fb 83       	std	Y+3, r31	; 0x03
 568:	ea 83       	std	Y+2, r30	; 0x02
 56a:	04 c0       	rjmp	.+8      	; 0x574 <lock+0x46>
	} else {
		thread q = *queue;
		*queue = p;
 56c:	fb 83       	std	Y+3, r31	; 0x03
 56e:	ea 83       	std	Y+2, r30	; 0x02
		p->next = q;
 570:	35 83       	std	Z+5, r19	; 0x05
 572:	24 83       	std	Z+4, r18	; 0x04
	if(m->locked == 0){
		m->locked = 1;
	}else{
		thread next = dequeue(&readyQ);
		enqueue(current, &(m->waitQ));
		dispatch(next);
 574:	04 df       	rcall	.-504    	; 0x37e <dispatch>
	}
	ENABLE();
 576:	78 94       	sei
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <unlock>:

void unlock(mutex *m) {
	DISABLE();
 57e:	f8 94       	cli
	if(m->waitQ == NULL){
 580:	fc 01       	movw	r30, r24
 582:	22 81       	ldd	r18, Z+2	; 0x02
 584:	33 81       	ldd	r19, Z+3	; 0x03
 586:	23 2b       	or	r18, r19
 588:	19 f4       	brne	.+6      	; 0x590 <unlock+0x12>
		m->locked = 0;
 58a:	11 82       	std	Z+1, r1	; 0x01
 58c:	10 82       	st	Z, r1
 58e:	1b c0       	rjmp	.+54     	; 0x5c6 <unlock+0x48>
	}else{
		thread next = dequeue(&(m->waitQ));
 590:	02 96       	adiw	r24, 0x02	; 2
 592:	e2 de       	rcall	.-572    	; 0x358 <dequeue>
		enqueue(current, &readyQ);
 594:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <current>
 598:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <current+0x1>
		q->next = p;
	}
}
*/
static void enqueue(thread p, thread *queue) {
	if (*queue == NULL) {
 59c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <readyQ>
 5a0:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <readyQ+0x1>
 5a4:	21 15       	cp	r18, r1
 5a6:	31 05       	cpc	r19, r1
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <unlock+0x3a>
		p->next = NULL;
 5aa:	15 82       	std	Z+5, r1	; 0x05
 5ac:	14 82       	std	Z+4, r1	; 0x04
		*queue = p;
 5ae:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <readyQ+0x1>
 5b2:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <readyQ>
 5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <unlock+0x46>
	} else {
		thread q = *queue;
		*queue = p;
 5b8:	f0 93 23 01 	sts	0x0123, r31	; 0x800123 <readyQ+0x1>
 5bc:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <readyQ>
		p->next = q;
 5c0:	35 83       	std	Z+5, r19	; 0x05
 5c2:	24 83       	std	Z+4, r18	; 0x04
	if(m->waitQ == NULL){
		m->locked = 0;
	}else{
		thread next = dequeue(&(m->waitQ));
		enqueue(current, &readyQ);
		dispatch(next);
 5c4:	dc de       	rcall	.-584    	; 0x37e <dispatch>
	}
	ENABLE();
 5c6:	78 94       	sei
 5c8:	08 95       	ret

000005ca <__mulsi3>:
 5ca:	db 01       	movw	r26, r22
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	49 d0       	rcall	.+146    	; 0x664 <__muluhisi3>
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	a2 9f       	mul	r26, r18
 5d8:	80 0d       	add	r24, r0
 5da:	91 1d       	adc	r25, r1
 5dc:	a3 9f       	mul	r26, r19
 5de:	90 0d       	add	r25, r0
 5e0:	b2 9f       	mul	r27, r18
 5e2:	90 0d       	add	r25, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	08 95       	ret

000005e8 <__udivmodsi4>:
 5e8:	a1 e2       	ldi	r26, 0x21	; 33
 5ea:	1a 2e       	mov	r1, r26
 5ec:	aa 1b       	sub	r26, r26
 5ee:	bb 1b       	sub	r27, r27
 5f0:	fd 01       	movw	r30, r26
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <__udivmodsi4_ep>

000005f4 <__udivmodsi4_loop>:
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	ee 1f       	adc	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	a2 17       	cp	r26, r18
 5fe:	b3 07       	cpc	r27, r19
 600:	e4 07       	cpc	r30, r20
 602:	f5 07       	cpc	r31, r21
 604:	20 f0       	brcs	.+8      	; 0x60e <__udivmodsi4_ep>
 606:	a2 1b       	sub	r26, r18
 608:	b3 0b       	sbc	r27, r19
 60a:	e4 0b       	sbc	r30, r20
 60c:	f5 0b       	sbc	r31, r21

0000060e <__udivmodsi4_ep>:
 60e:	66 1f       	adc	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	1a 94       	dec	r1
 618:	69 f7       	brne	.-38     	; 0x5f4 <__udivmodsi4_loop>
 61a:	60 95       	com	r22
 61c:	70 95       	com	r23
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	9b 01       	movw	r18, r22
 624:	ac 01       	movw	r20, r24
 626:	bd 01       	movw	r22, r26
 628:	cf 01       	movw	r24, r30
 62a:	08 95       	ret

0000062c <__divmodsi4>:
 62c:	05 2e       	mov	r0, r21
 62e:	97 fb       	bst	r25, 7
 630:	16 f4       	brtc	.+4      	; 0x636 <__divmodsi4+0xa>
 632:	00 94       	com	r0
 634:	0f d0       	rcall	.+30     	; 0x654 <__negsi2>
 636:	57 fd       	sbrc	r21, 7
 638:	05 d0       	rcall	.+10     	; 0x644 <__divmodsi4_neg2>
 63a:	d6 df       	rcall	.-84     	; 0x5e8 <__udivmodsi4>
 63c:	07 fc       	sbrc	r0, 7
 63e:	02 d0       	rcall	.+4      	; 0x644 <__divmodsi4_neg2>
 640:	46 f4       	brtc	.+16     	; 0x652 <__divmodsi4_exit>
 642:	08 c0       	rjmp	.+16     	; 0x654 <__negsi2>

00000644 <__divmodsi4_neg2>:
 644:	50 95       	com	r21
 646:	40 95       	com	r20
 648:	30 95       	com	r19
 64a:	21 95       	neg	r18
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
 64e:	4f 4f       	sbci	r20, 0xFF	; 255
 650:	5f 4f       	sbci	r21, 0xFF	; 255

00000652 <__divmodsi4_exit>:
 652:	08 95       	ret

00000654 <__negsi2>:
 654:	90 95       	com	r25
 656:	80 95       	com	r24
 658:	70 95       	com	r23
 65a:	61 95       	neg	r22
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__muluhisi3>:
 664:	09 d0       	rcall	.+18     	; 0x678 <__umulhisi3>
 666:	a5 9f       	mul	r26, r21
 668:	90 0d       	add	r25, r0
 66a:	b4 9f       	mul	r27, r20
 66c:	90 0d       	add	r25, r0
 66e:	a4 9f       	mul	r26, r20
 670:	80 0d       	add	r24, r0
 672:	91 1d       	adc	r25, r1
 674:	11 24       	eor	r1, r1
 676:	08 95       	ret

00000678 <__umulhisi3>:
 678:	a2 9f       	mul	r26, r18
 67a:	b0 01       	movw	r22, r0
 67c:	b3 9f       	mul	r27, r19
 67e:	c0 01       	movw	r24, r0
 680:	a3 9f       	mul	r26, r19
 682:	70 0d       	add	r23, r0
 684:	81 1d       	adc	r24, r1
 686:	11 24       	eor	r1, r1
 688:	91 1d       	adc	r25, r1
 68a:	b2 9f       	mul	r27, r18
 68c:	70 0d       	add	r23, r0
 68e:	81 1d       	adc	r24, r1
 690:	11 24       	eor	r1, r1
 692:	91 1d       	adc	r25, r1
 694:	08 95       	ret

00000696 <setjmp>:
 696:	dc 01       	movw	r26, r24
 698:	2d 92       	st	X+, r2
 69a:	3d 92       	st	X+, r3
 69c:	4d 92       	st	X+, r4
 69e:	5d 92       	st	X+, r5
 6a0:	6d 92       	st	X+, r6
 6a2:	7d 92       	st	X+, r7
 6a4:	8d 92       	st	X+, r8
 6a6:	9d 92       	st	X+, r9
 6a8:	ad 92       	st	X+, r10
 6aa:	bd 92       	st	X+, r11
 6ac:	cd 92       	st	X+, r12
 6ae:	dd 92       	st	X+, r13
 6b0:	ed 92       	st	X+, r14
 6b2:	fd 92       	st	X+, r15
 6b4:	0d 93       	st	X+, r16
 6b6:	1d 93       	st	X+, r17
 6b8:	cd 93       	st	X+, r28
 6ba:	dd 93       	st	X+, r29
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	8d b7       	in	r24, 0x3d	; 61
 6c2:	8d 93       	st	X+, r24
 6c4:	8e b7       	in	r24, 0x3e	; 62
 6c6:	8d 93       	st	X+, r24
 6c8:	8f b7       	in	r24, 0x3f	; 63
 6ca:	8d 93       	st	X+, r24
 6cc:	ed 93       	st	X+, r30
 6ce:	fd 93       	st	X+, r31
 6d0:	88 27       	eor	r24, r24
 6d2:	99 27       	eor	r25, r25
 6d4:	09 94       	ijmp

000006d6 <longjmp>:
 6d6:	dc 01       	movw	r26, r24
 6d8:	cb 01       	movw	r24, r22
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	91 05       	cpc	r25, r1
 6de:	81 1d       	adc	r24, r1
 6e0:	2d 90       	ld	r2, X+
 6e2:	3d 90       	ld	r3, X+
 6e4:	4d 90       	ld	r4, X+
 6e6:	5d 90       	ld	r5, X+
 6e8:	6d 90       	ld	r6, X+
 6ea:	7d 90       	ld	r7, X+
 6ec:	8d 90       	ld	r8, X+
 6ee:	9d 90       	ld	r9, X+
 6f0:	ad 90       	ld	r10, X+
 6f2:	bd 90       	ld	r11, X+
 6f4:	cd 90       	ld	r12, X+
 6f6:	dd 90       	ld	r13, X+
 6f8:	ed 90       	ld	r14, X+
 6fa:	fd 90       	ld	r15, X+
 6fc:	0d 91       	ld	r16, X+
 6fe:	1d 91       	ld	r17, X+
 700:	cd 91       	ld	r28, X+
 702:	dd 91       	ld	r29, X+
 704:	ed 91       	ld	r30, X+
 706:	fd 91       	ld	r31, X+
 708:	0d 90       	ld	r0, X+
 70a:	f8 94       	cli
 70c:	fe bf       	out	0x3e, r31	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	ed bf       	out	0x3d, r30	; 61
 712:	ed 91       	ld	r30, X+
 714:	fd 91       	ld	r31, X+
 716:	09 94       	ijmp

00000718 <_exit>:
 718:	f8 94       	cli

0000071a <__stop_program>:
 71a:	ff cf       	rjmp	.-2      	; 0x71a <__stop_program>
