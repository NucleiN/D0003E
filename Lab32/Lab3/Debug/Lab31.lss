
Lab31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  00800118  00800118  000006b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c0  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b93  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c9  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000072fc  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bc  00000000  00000000  0000a46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000ac28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002947  00000000  00000000  0000ad00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	00 00       	nop
   4:	46 c0       	rjmp	.+140    	; 0x92 <__bad_interrupt>
   6:	00 00       	nop
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	00 00       	nop
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	00 00       	nop
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	00 00       	nop
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	00 00       	nop
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	14 c2       	rjmp	.+1064   	; 0x446 <__vector_7>
  1e:	00 00       	nop
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	00 00       	nop
  24:	36 c0       	rjmp	.+108    	; 0x92 <__bad_interrupt>
  26:	00 00       	nop
  28:	34 c0       	rjmp	.+104    	; 0x92 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	00 00       	nop
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	00 00       	nop
  34:	2e c0       	rjmp	.+92     	; 0x92 <__bad_interrupt>
  36:	00 00       	nop
  38:	2c c0       	rjmp	.+88     	; 0x92 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2a c0       	rjmp	.+84     	; 0x92 <__bad_interrupt>
  3e:	00 00       	nop
  40:	28 c0       	rjmp	.+80     	; 0x92 <__bad_interrupt>
  42:	00 00       	nop
  44:	26 c0       	rjmp	.+76     	; 0x92 <__bad_interrupt>
  46:	00 00       	nop
  48:	24 c0       	rjmp	.+72     	; 0x92 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	22 c0       	rjmp	.+68     	; 0x92 <__bad_interrupt>
  4e:	00 00       	nop
  50:	20 c0       	rjmp	.+64     	; 0x92 <__bad_interrupt>
  52:	00 00       	nop
  54:	1e c0       	rjmp	.+60     	; 0x92 <__bad_interrupt>
  56:	00 00       	nop
  58:	1c c0       	rjmp	.+56     	; 0x92 <__bad_interrupt>
	...

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e0       	ldi	r30, 0x04	; 4
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 33       	cpi	r26, 0x3F	; 63
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	f1 d0       	rcall	.+482    	; 0x272 <main>
  90:	b7 c2       	rjmp	.+1390   	; 0x600 <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <blinkz>:
	//		CC Max 3.35V
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
}

void BTN_init(void){
	PORTB = (1 << PINB7);
  94:	c9 ef       	ldi	r28, 0xF9	; 249
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	01 d2       	rcall	.+1026   	; 0x49e <tim1_cnt>
  9c:	0a 97       	sbiw	r24, 0x0a	; 10
  9e:	ec f3       	brlt	.-6      	; 0x9a <blinkz+0x6>
  a0:	03 d2       	rcall	.+1030   	; 0x4a8 <tim1_rst>
  a2:	88 81       	ld	r24, Y
  a4:	81 27       	eor	r24, r17
  a6:	88 83       	st	Y, r24
  a8:	f8 cf       	rjmp	.-16     	; 0x9a <blinkz+0x6>

000000aa <CLK_init>:
  aa:	e1 e6       	ldi	r30, 0x61	; 97
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	80 83       	st	Z, r24
  b2:	10 82       	st	Z, r1
  b4:	08 95       	ret

000000b6 <LCD_init>:
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
  bc:	87 eb       	ldi	r24, 0xB7	; 183
  be:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
  ce:	08 95       	ret

000000d0 <writeChar>:
}

uint16_t charNrStencils[10] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x1B51};
void writeChar(char c, int pos){
  d0:	ab 01       	movw	r20, r22
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;
  d2:	80 53       	subi	r24, 0x30	; 48

	uint8_t shift = pos%2 ? 0x04 : 0x00;
  d4:	60 ff       	sbrs	r22, 0
  d6:	03 c0       	rjmp	.+6      	; 0xde <writeChar+0xe>
  d8:	74 e0       	ldi	r23, 0x04	; 4
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
  da:	af e0       	ldi	r26, 0x0F	; 15
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <writeChar+0x12>
void writeChar(char c, int pos){
	if(pos < 0 && pos > 5) return;
	uint8_t ch = c;
	ch-= 0x30;

	uint8_t shift = pos%2 ? 0x04 : 0x00;
  de:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
  e0:	a0 ef       	ldi	r26, 0xF0	; 240
	uint16_t stencil = charNrStencils[ch];
  e2:	e8 2f       	mov	r30, r24
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e0 50       	subi	r30, 0x00	; 0
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	20 81       	ld	r18, Z
  f0:	31 81       	ldd	r19, Z+1	; 0x01

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
  f2:	fa 01       	movw	r30, r20
  f4:	ff 23       	and	r31, r31
  f6:	0c f4       	brge	.+2      	; 0xfa <writeChar+0x2a>
  f8:	31 96       	adiw	r30, 0x01	; 1
  fa:	f5 95       	asr	r31
  fc:	e7 95       	ror	r30
  fe:	e4 51       	subi	r30, 0x14	; 20
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	af 01       	movw	r20, r30
 104:	4c 5e       	subi	r20, 0xEC	; 236
 106:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
 108:	c9 01       	movw	r24, r18
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	99 27       	eor	r25, r25
 10e:	07 2e       	mov	r0, r23
 110:	02 c0       	rjmp	.+4      	; 0x116 <writeChar+0x46>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <writeChar+0x42>
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
		*memPtr&= mask;
 11a:	90 81       	ld	r25, Z
 11c:	9a 23       	and	r25, r26
		*memPtr|= (stencil & 0x0F) << shift;
 11e:	89 2b       	or	r24, r25
 120:	80 83       	st	Z, r24
		stencil>>= 0x04;
 122:	32 95       	swap	r19
 124:	22 95       	swap	r18
 126:	2f 70       	andi	r18, 0x0F	; 15
 128:	23 27       	eor	r18, r19
 12a:	3f 70       	andi	r19, 0x0F	; 15
 12c:	23 27       	eor	r18, r19
		memPtr+= 0x05;
 12e:	35 96       	adiw	r30, 0x05	; 5
	uint8_t mask = pos%2 ? 0x0F : 0xF0;
	uint16_t stencil = charNrStencils[ch];

	uint8_t *memPtr = &LCDDR0;
	memPtr+= pos/2;
	for(int i = 0; i < 4; i++){
 130:	e4 17       	cp	r30, r20
 132:	f5 07       	cpc	r31, r21
 134:	49 f7       	brne	.-46     	; 0x108 <writeChar+0x38>
		*memPtr&= mask;
		*memPtr|= (stencil & 0x0F) << shift;
		stencil>>= 0x04;
		memPtr+= 0x05;
	}
}
 136:	08 95       	ret

00000138 <is_prime>:

int is_prime(long nr){
 138:	8f 92       	push	r8
 13a:	9f 92       	push	r9
 13c:	af 92       	push	r10
 13e:	bf 92       	push	r11
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	4b 01       	movw	r8, r22
 14a:	5c 01       	movw	r10, r24
	for(unsigned long i = 2; i*i < nr; i++)
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	88 16       	cp	r8, r24
 150:	91 04       	cpc	r9, r1
 152:	a1 04       	cpc	r10, r1
 154:	b1 04       	cpc	r11, r1
 156:	18 f1       	brcs	.+70     	; 0x19e <is_prime+0x66>
	if(!(nr%i))
 158:	80 fe       	sbrs	r8, 0
 15a:	24 c0       	rjmp	.+72     	; 0x1a4 <is_prime+0x6c>
 15c:	c1 2c       	mov	r12, r1
 15e:	d1 2c       	mov	r13, r1
 160:	76 01       	movw	r14, r12
 162:	68 94       	set
 164:	c1 f8       	bld	r12, 1
 166:	09 c0       	rjmp	.+18     	; 0x17a <is_prime+0x42>
 168:	c5 01       	movw	r24, r10
 16a:	b4 01       	movw	r22, r8
 16c:	a7 01       	movw	r20, r14
 16e:	96 01       	movw	r18, r12
 170:	af d1       	rcall	.+862    	; 0x4d0 <__udivmodsi4>
 172:	67 2b       	or	r22, r23
 174:	68 2b       	or	r22, r24
 176:	69 2b       	or	r22, r25
 178:	c1 f0       	breq	.+48     	; 0x1aa <is_prime+0x72>
		memPtr+= 0x05;
	}
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	c8 1a       	sub	r12, r24
 17e:	d8 0a       	sbc	r13, r24
 180:	e8 0a       	sbc	r14, r24
 182:	f8 0a       	sbc	r15, r24
 184:	a7 01       	movw	r20, r14
 186:	96 01       	movw	r18, r12
 188:	c7 01       	movw	r24, r14
 18a:	b6 01       	movw	r22, r12
 18c:	92 d1       	rcall	.+804    	; 0x4b2 <__mulsi3>
 18e:	68 15       	cp	r22, r8
 190:	79 05       	cpc	r23, r9
 192:	8a 05       	cpc	r24, r10
 194:	9b 05       	cpc	r25, r11
 196:	40 f3       	brcs	.-48     	; 0x168 <is_prime+0x30>
	if(!(nr%i))
	return 0;
	return 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <is_prime+0x76>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <is_prime+0x76>
}

int is_prime(long nr){
	for(unsigned long i = 2; i*i < nr; i++)
	if(!(nr%i))
	return 0;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <is_prime+0x76>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	bf 90       	pop	r11
 1b8:	af 90       	pop	r10
 1ba:	9f 90       	pop	r9
 1bc:	8f 90       	pop	r8
 1be:	08 95       	ret

000001c0 <printAt>:

void printAt(long num, int pos) {
 1c0:	8f 92       	push	r8
 1c2:	9f 92       	push	r9
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	4b 01       	movw	r8, r22
 1d6:	5c 01       	movw	r10, r24
 1d8:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 1da:	24 e6       	ldi	r18, 0x64	; 100
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	98 d1       	rcall	.+816    	; 0x514 <__divmodsi4>
 1e4:	0f 2e       	mov	r0, r31
 1e6:	fa e0       	ldi	r31, 0x0A	; 10
 1e8:	cf 2e       	mov	r12, r31
 1ea:	d1 2c       	mov	r13, r1
 1ec:	e1 2c       	mov	r14, r1
 1ee:	f1 2c       	mov	r15, r1
 1f0:	f0 2d       	mov	r31, r0
 1f2:	a7 01       	movw	r20, r14
 1f4:	96 01       	movw	r18, r12
 1f6:	8e d1       	rcall	.+796    	; 0x514 <__divmodsi4>
 1f8:	be 01       	movw	r22, r28
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	82 0f       	add	r24, r18
 1fe:	68 df       	rcall	.-304    	; 0xd0 <writeChar>
	pp++;
 200:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
 202:	c5 01       	movw	r24, r10
 204:	b4 01       	movw	r22, r8
 206:	a7 01       	movw	r20, r14
 208:	96 01       	movw	r18, r12
 20a:	84 d1       	rcall	.+776    	; 0x514 <__divmodsi4>
 20c:	86 2f       	mov	r24, r22
 20e:	be 01       	movw	r22, r28
 210:	80 5d       	subi	r24, 0xD0	; 208
 212:	5e df       	rcall	.-324    	; 0xd0 <writeChar>
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	df 90       	pop	r13
 21e:	cf 90       	pop	r12
 220:	bf 90       	pop	r11
 222:	af 90       	pop	r10
 224:	9f 90       	pop	r9
 226:	8f 90       	pop	r8
 228:	08 95       	ret

0000022a <birdUp>:
		LCDDR13^= 0x01;
	}
}

void birdUp(void){
	uint8_t cnt = 0;
 22a:	c0 e0       	ldi	r28, 0x00	; 0
	for(;;){
		printAt(cnt,4);
 22c:	8c 2f       	mov	r24, r28
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	a0 e0       	ldi	r26, 0x00	; 0
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	44 e0       	ldi	r20, 0x04	; 4
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	bc 01       	movw	r22, r24
 23a:	cd 01       	movw	r24, r26
 23c:	c1 df       	rcall	.-126    	; 0x1c0 <printAt>
		while(PINB & (0x1<<PINB7));
 23e:	1f 99       	sbic	0x03, 7	; 3
 240:	fe cf       	rjmp	.-4      	; 0x23e <birdUp+0x14>
		cnt++;
 242:	cf 5f       	subi	r28, 0xFF	; 255
		while(!(PINB & (0x1<<PINB7)));
 244:	1f 9b       	sbis	0x03, 7	; 3
 246:	fe cf       	rjmp	.-4      	; 0x244 <birdUp+0x1a>
 248:	f1 cf       	rjmp	.-30     	; 0x22c <birdUp+0x2>

0000024a <computePrimes>:
	}
}

void computePrimes(int pos) {
 24a:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
 250:	76 01       	movw	r14, r12
 252:	c3 94       	inc	r12
		if (is_prime(n)) {
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	6f df       	rcall	.-290    	; 0x138 <is_prime>
 25a:	89 2b       	or	r24, r25
 25c:	21 f0       	breq	.+8      	; 0x266 <computePrimes+0x1c>
			printAt(n, pos);
 25e:	ae 01       	movw	r20, r28
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	ad df       	rcall	.-166    	; 0x1c0 <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	c8 1a       	sub	r12, r24
 26a:	d8 0a       	sbc	r13, r24
 26c:	e8 0a       	sbc	r14, r24
 26e:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
			//yield();
		}
	}
 270:	f1 cf       	rjmp	.-30     	; 0x254 <computePrimes+0xa>

00000272 <main>:
}

int main() {
	CLK_init();
 272:	1b df       	rcall	.-458    	; 0xaa <CLK_init>
	LCD_init();
 274:	20 df       	rcall	.-448    	; 0xb6 <LCD_init>
	//		CC Max 3.35V
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
}

void BTN_init(void){
	PORTB = (1 << PINB7);
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	85 b9       	out	0x05, r24	; 5
int main() {
	CLK_init();
	LCD_init();
	BTN_init();
	
	spawn(birdUp, 0);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	85 e1       	ldi	r24, 0x15	; 21
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	6f d0       	rcall	.+222    	; 0x362 <spawn>
	spawn(blinkz, 0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	8a e4       	ldi	r24, 0x4A	; 74
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	6a d0       	rcall	.+212    	; 0x362 <spawn>
	
	computePrimes(0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	db df       	rcall	.-74     	; 0x24a <computePrimes>

00000294 <enqueue>:
		}else{
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
	}
	ENABLE();
}
 294:	dc 01       	movw	r26, r24
 296:	15 96       	adiw	r26, 0x05	; 5
 298:	1c 92       	st	X, r1
 29a:	1e 92       	st	-X, r1
 29c:	14 97       	sbiw	r26, 0x04	; 4
 29e:	db 01       	movw	r26, r22
 2a0:	ed 91       	ld	r30, X+
 2a2:	fc 91       	ld	r31, X
 2a4:	11 97       	sbiw	r26, 0x01	; 1
 2a6:	30 97       	sbiw	r30, 0x00	; 0
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <enqueue+0x1e>
 2aa:	8d 93       	st	X+, r24
 2ac:	9c 93       	st	X, r25
 2ae:	08 95       	ret
 2b0:	f9 01       	movw	r30, r18
 2b2:	24 81       	ldd	r18, Z+4	; 0x04
 2b4:	35 81       	ldd	r19, Z+5	; 0x05
 2b6:	21 15       	cp	r18, r1
 2b8:	31 05       	cpc	r19, r1
 2ba:	d1 f7       	brne	.-12     	; 0x2b0 <enqueue+0x1c>
 2bc:	95 83       	std	Z+5, r25	; 0x05
 2be:	84 83       	std	Z+4, r24	; 0x04
 2c0:	08 95       	ret

000002c2 <dequeue>:
 2c2:	dc 01       	movw	r26, r24
 2c4:	ed 91       	ld	r30, X+
 2c6:	fc 91       	ld	r31, X
 2c8:	11 97       	sbiw	r26, 0x01	; 1
 2ca:	30 97       	sbiw	r30, 0x00	; 0
 2cc:	39 f4       	brne	.+14     	; 0x2dc <dequeue+0x1a>
 2ce:	e4 ef       	ldi	r30, 0xF4	; 244
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	90 81       	ld	r25, Z
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	89 27       	eor	r24, r25
 2d8:	80 83       	st	Z, r24
 2da:	ff cf       	rjmp	.-2      	; 0x2da <dequeue+0x18>
 2dc:	24 81       	ldd	r18, Z+4	; 0x04
 2de:	35 81       	ldd	r19, Z+5	; 0x05
 2e0:	2d 93       	st	X+, r18
 2e2:	3c 93       	st	X, r19
 2e4:	cf 01       	movw	r24, r30
 2e6:	08 95       	ret

000002e8 <dispatch>:
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <dispatch+0x6>
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 2fa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 2fe:	06 96       	adiw	r24, 0x06	; 6
 300:	3e d1       	rcall	.+636    	; 0x57e <setjmp>
 302:	89 2b       	or	r24, r25
 304:	51 f4       	brne	.+20     	; 0x31a <dispatch+0x32>
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	9a 81       	ldd	r25, Y+2	; 0x02
 30a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 30e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	06 96       	adiw	r24, 0x06	; 6
 318:	52 d1       	rcall	.+676    	; 0x5be <longjmp>
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <yield>:
 324:	f8 94       	cli
 326:	6c e1       	ldi	r22, 0x1C	; 28
 328:	71 e0       	ldi	r23, 0x01	; 1
 32a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 32e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 332:	b0 df       	rcall	.-160    	; 0x294 <enqueue>
 334:	8c e1       	ldi	r24, 0x1C	; 28
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	c4 df       	rcall	.-120    	; 0x2c2 <dequeue>
 33a:	d6 df       	rcall	.-84     	; 0x2e8 <dispatch>
 33c:	78 94       	sei
 33e:	08 95       	ret

00000340 <TIM_init>:

void TIM_init(void){
	//		CTC				PSC 1024
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//		8MHz/1024/20
	OCR1A = 391;
 346:	87 e8       	ldi	r24, 0x87	; 135
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 34e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//		Interrupt En
	TIMSK1 = (1<<OCIE1A);
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCNT1 = 0;
 358:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 35c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 360:	08 95       	ret

00000362 <spawn>:
		current = next;
		longjmp(next->context,1);
	}
}

void spawn(void (* function)(int), int arg) {
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	00 d0       	rcall	.+0      	; 0x370 <spawn+0xe>
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	7c 01       	movw	r14, r24
 376:	8b 01       	movw	r16, r22
	thread newp;

	DISABLE();
 378:	f8 94       	cli
	if (!initialized) initialize();
 37a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <initialized>
 37e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <initialized+0x1>
 382:	89 2b       	or	r24, r25
 384:	e9 f4       	brne	.+58     	; 0x3c0 <spawn+0x5e>
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 386:	88 ef       	ldi	r24, 0xF8	; 248
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <threads+0x5>
 38e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <threads+0x4>
 392:	85 e6       	ldi	r24, 0x65	; 101
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <threads+0x72>
 39a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <threads+0x71>
 39e:	82 ed       	ldi	r24, 0xD2	; 210
 3a0:	92 e0       	ldi	r25, 0x02	; 2
 3a2:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <threads+0xdf>
 3a6:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 3aa:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <threads+0x14c>
 3ae:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <threads+0x14b>

	//BTN_init();
	TIM_init();
 3b2:	c6 df       	rcall	.-116    	; 0x340 <TIM_init>
	
	initialized = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <initialized+0x1>
 3bc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <initialized>
	thread newp;

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
 3c0:	86 e1       	ldi	r24, 0x16	; 22
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	7e df       	rcall	.-260    	; 0x2c2 <dequeue>
 3c6:	9a 83       	std	Y+2, r25	; 0x02
 3c8:	89 83       	std	Y+1, r24	; 0x01
	newp->function = function;
 3ca:	fc 01       	movw	r30, r24
 3cc:	f1 82       	std	Z+1, r15	; 0x01
 3ce:	e0 82       	st	Z, r14
	newp->arg = arg;
 3d0:	13 83       	std	Z+3, r17	; 0x03
 3d2:	02 83       	std	Z+2, r16	; 0x02
	newp->next = NULL;
 3d4:	15 82       	std	Z+5, r1	; 0x05
 3d6:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 3d8:	06 96       	adiw	r24, 0x06	; 6
 3da:	d1 d0       	rcall	.+418    	; 0x57e <setjmp>
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	c9 f4       	brne	.+50     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		ENABLE();
 3e0:	78 94       	sei
		current->function(current->arg);
 3e2:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 3e6:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 3ea:	ed 91       	ld	r30, X+
 3ec:	fc 91       	ld	r31, X
 3ee:	11 97       	sbiw	r26, 0x01	; 1
 3f0:	12 96       	adiw	r26, 0x02	; 2
 3f2:	8d 91       	ld	r24, X+
 3f4:	9c 91       	ld	r25, X
 3f6:	13 97       	sbiw	r26, 0x03	; 3
 3f8:	09 95       	icall
		DISABLE();
 3fa:	f8 94       	cli
		enqueue(current, &freeQ);
 3fc:	66 e1       	ldi	r22, 0x16	; 22
 3fe:	71 e0       	ldi	r23, 0x01	; 1
 400:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 404:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 408:	45 df       	rcall	.-374    	; 0x294 <enqueue>
		dispatch(dequeue(&readyQ));
 40a:	8c e1       	ldi	r24, 0x1C	; 28
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	59 df       	rcall	.-334    	; 0x2c2 <dequeue>
 410:	6b df       	rcall	.-298    	; 0x2e8 <dispatch>
	}
	SETSTACK(&newp->context, &newp->stack);
 412:	e9 81       	ldd	r30, Y+1	; 0x01
 414:	fa 81       	ldd	r31, Y+2	; 0x02
 416:	36 96       	adiw	r30, 0x06	; 6
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	9a 81       	ldd	r25, Y+2	; 0x02
 41c:	87 59       	subi	r24, 0x97	; 151
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	91 8b       	std	Z+17, r25	; 0x11
 422:	80 8b       	std	Z+16, r24	; 0x10
 424:	93 8b       	std	Z+19, r25	; 0x13
 426:	82 8b       	std	Z+18, r24	; 0x12

	enqueue(newp, &readyQ);
 428:	6c e1       	ldi	r22, 0x1C	; 28
 42a:	71 e0       	ldi	r23, 0x01	; 1
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	31 df       	rcall	.-414    	; 0x294 <enqueue>
	ENABLE();
 432:	78 94       	sei
}
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	08 95       	ret

00000446 <__vector_7>:
	if(!(PINB & (1<<PINB7)))
	yield();
}
*/
int tim1_ovf = 0;
ISR(TIMER1_COMPA_vect){ // TIM IE
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	tim1_ovf++;
 468:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 46c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 476:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	yield();
 47a:	54 df       	rcall	.-344    	; 0x324 <yield>
}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <tim1_cnt>:

int tim1_cnt(){
	return tim1_ovf;
}
 49e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 4a2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 4a6:	08 95       	ret

000004a8 <tim1_rst>:

void tim1_rst(){
	tim1_ovf = 0;
 4a8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 4ac:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 4b0:	08 95       	ret

000004b2 <__mulsi3>:
 4b2:	db 01       	movw	r26, r22
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	49 d0       	rcall	.+146    	; 0x54c <__muluhisi3>
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	a2 9f       	mul	r26, r18
 4c0:	80 0d       	add	r24, r0
 4c2:	91 1d       	adc	r25, r1
 4c4:	a3 9f       	mul	r26, r19
 4c6:	90 0d       	add	r25, r0
 4c8:	b2 9f       	mul	r27, r18
 4ca:	90 0d       	add	r25, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	08 95       	ret

000004d0 <__udivmodsi4>:
 4d0:	a1 e2       	ldi	r26, 0x21	; 33
 4d2:	1a 2e       	mov	r1, r26
 4d4:	aa 1b       	sub	r26, r26
 4d6:	bb 1b       	sub	r27, r27
 4d8:	fd 01       	movw	r30, r26
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <__udivmodsi4_ep>

000004dc <__udivmodsi4_loop>:
 4dc:	aa 1f       	adc	r26, r26
 4de:	bb 1f       	adc	r27, r27
 4e0:	ee 1f       	adc	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	a2 17       	cp	r26, r18
 4e6:	b3 07       	cpc	r27, r19
 4e8:	e4 07       	cpc	r30, r20
 4ea:	f5 07       	cpc	r31, r21
 4ec:	20 f0       	brcs	.+8      	; 0x4f6 <__udivmodsi4_ep>
 4ee:	a2 1b       	sub	r26, r18
 4f0:	b3 0b       	sbc	r27, r19
 4f2:	e4 0b       	sbc	r30, r20
 4f4:	f5 0b       	sbc	r31, r21

000004f6 <__udivmodsi4_ep>:
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	1a 94       	dec	r1
 500:	69 f7       	brne	.-38     	; 0x4dc <__udivmodsi4_loop>
 502:	60 95       	com	r22
 504:	70 95       	com	r23
 506:	80 95       	com	r24
 508:	90 95       	com	r25
 50a:	9b 01       	movw	r18, r22
 50c:	ac 01       	movw	r20, r24
 50e:	bd 01       	movw	r22, r26
 510:	cf 01       	movw	r24, r30
 512:	08 95       	ret

00000514 <__divmodsi4>:
 514:	05 2e       	mov	r0, r21
 516:	97 fb       	bst	r25, 7
 518:	16 f4       	brtc	.+4      	; 0x51e <__divmodsi4+0xa>
 51a:	00 94       	com	r0
 51c:	0f d0       	rcall	.+30     	; 0x53c <__negsi2>
 51e:	57 fd       	sbrc	r21, 7
 520:	05 d0       	rcall	.+10     	; 0x52c <__divmodsi4_neg2>
 522:	d6 df       	rcall	.-84     	; 0x4d0 <__udivmodsi4>
 524:	07 fc       	sbrc	r0, 7
 526:	02 d0       	rcall	.+4      	; 0x52c <__divmodsi4_neg2>
 528:	46 f4       	brtc	.+16     	; 0x53a <__divmodsi4_exit>
 52a:	08 c0       	rjmp	.+16     	; 0x53c <__negsi2>

0000052c <__divmodsi4_neg2>:
 52c:	50 95       	com	r21
 52e:	40 95       	com	r20
 530:	30 95       	com	r19
 532:	21 95       	neg	r18
 534:	3f 4f       	sbci	r19, 0xFF	; 255
 536:	4f 4f       	sbci	r20, 0xFF	; 255
 538:	5f 4f       	sbci	r21, 0xFF	; 255

0000053a <__divmodsi4_exit>:
 53a:	08 95       	ret

0000053c <__negsi2>:
 53c:	90 95       	com	r25
 53e:	80 95       	com	r24
 540:	70 95       	com	r23
 542:	61 95       	neg	r22
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__muluhisi3>:
 54c:	09 d0       	rcall	.+18     	; 0x560 <__umulhisi3>
 54e:	a5 9f       	mul	r26, r21
 550:	90 0d       	add	r25, r0
 552:	b4 9f       	mul	r27, r20
 554:	90 0d       	add	r25, r0
 556:	a4 9f       	mul	r26, r20
 558:	80 0d       	add	r24, r0
 55a:	91 1d       	adc	r25, r1
 55c:	11 24       	eor	r1, r1
 55e:	08 95       	ret

00000560 <__umulhisi3>:
 560:	a2 9f       	mul	r26, r18
 562:	b0 01       	movw	r22, r0
 564:	b3 9f       	mul	r27, r19
 566:	c0 01       	movw	r24, r0
 568:	a3 9f       	mul	r26, r19
 56a:	70 0d       	add	r23, r0
 56c:	81 1d       	adc	r24, r1
 56e:	11 24       	eor	r1, r1
 570:	91 1d       	adc	r25, r1
 572:	b2 9f       	mul	r27, r18
 574:	70 0d       	add	r23, r0
 576:	81 1d       	adc	r24, r1
 578:	11 24       	eor	r1, r1
 57a:	91 1d       	adc	r25, r1
 57c:	08 95       	ret

0000057e <setjmp>:
 57e:	dc 01       	movw	r26, r24
 580:	2d 92       	st	X+, r2
 582:	3d 92       	st	X+, r3
 584:	4d 92       	st	X+, r4
 586:	5d 92       	st	X+, r5
 588:	6d 92       	st	X+, r6
 58a:	7d 92       	st	X+, r7
 58c:	8d 92       	st	X+, r8
 58e:	9d 92       	st	X+, r9
 590:	ad 92       	st	X+, r10
 592:	bd 92       	st	X+, r11
 594:	cd 92       	st	X+, r12
 596:	dd 92       	st	X+, r13
 598:	ed 92       	st	X+, r14
 59a:	fd 92       	st	X+, r15
 59c:	0d 93       	st	X+, r16
 59e:	1d 93       	st	X+, r17
 5a0:	cd 93       	st	X+, r28
 5a2:	dd 93       	st	X+, r29
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	8d b7       	in	r24, 0x3d	; 61
 5aa:	8d 93       	st	X+, r24
 5ac:	8e b7       	in	r24, 0x3e	; 62
 5ae:	8d 93       	st	X+, r24
 5b0:	8f b7       	in	r24, 0x3f	; 63
 5b2:	8d 93       	st	X+, r24
 5b4:	ed 93       	st	X+, r30
 5b6:	fd 93       	st	X+, r31
 5b8:	88 27       	eor	r24, r24
 5ba:	99 27       	eor	r25, r25
 5bc:	09 94       	ijmp

000005be <longjmp>:
 5be:	dc 01       	movw	r26, r24
 5c0:	cb 01       	movw	r24, r22
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	91 05       	cpc	r25, r1
 5c6:	81 1d       	adc	r24, r1
 5c8:	2d 90       	ld	r2, X+
 5ca:	3d 90       	ld	r3, X+
 5cc:	4d 90       	ld	r4, X+
 5ce:	5d 90       	ld	r5, X+
 5d0:	6d 90       	ld	r6, X+
 5d2:	7d 90       	ld	r7, X+
 5d4:	8d 90       	ld	r8, X+
 5d6:	9d 90       	ld	r9, X+
 5d8:	ad 90       	ld	r10, X+
 5da:	bd 90       	ld	r11, X+
 5dc:	cd 90       	ld	r12, X+
 5de:	dd 90       	ld	r13, X+
 5e0:	ed 90       	ld	r14, X+
 5e2:	fd 90       	ld	r15, X+
 5e4:	0d 91       	ld	r16, X+
 5e6:	1d 91       	ld	r17, X+
 5e8:	cd 91       	ld	r28, X+
 5ea:	dd 91       	ld	r29, X+
 5ec:	ed 91       	ld	r30, X+
 5ee:	fd 91       	ld	r31, X+
 5f0:	0d 90       	ld	r0, X+
 5f2:	f8 94       	cli
 5f4:	fe bf       	out	0x3e, r31	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	ed bf       	out	0x3d, r30	; 61
 5fa:	ed 91       	ld	r30, X+
 5fc:	fd 91       	ld	r31, X+
 5fe:	09 94       	ijmp

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
